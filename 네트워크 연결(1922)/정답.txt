#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n, m;

int getParent(int node, int parent[])
{
	if (node == parent[node]) return node;

	return parent[node] = getParent(parent[node], parent);
}

int unionParent(int first, int second, int parent[])
{
	int firstParent = getParent(first, parent);
	int secondParent = getParent(second, parent);

	if (firstParent < secondParent)
		return parent[secondParent] = firstParent;
	else
		return parent[firstParent] = secondParent;
}

bool findParent(int first, int second, int parent[])
{
	if (getParent(first, parent) == getParent(second, parent))
		return true;

	return false;
}

class Edge {
public :
	int start;
	int end;
	int weight;
};

vector < Edge* > edges;

int compare(Edge *first, Edge * second)
{
	return first->weight < second->weight;
}

int main()
{
	int parent[1001] = { 0, };
	for (int i = 1; i <= 1000; i++)
		parent[i] = i;

	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		Edge* edge = new Edge();
		cin >> edge->start >> edge->end >> edge->weight;
		edges.push_back(edge);
	}

	sort(edges.begin(), edges.end(), compare);

	int totalWeight = 0;
	for (int i = 0; i < m; i++)
	{
		Edge* edge = edges.at(i);
		if (findParent(edge->start, edge->end, parent) == false)
		{
			unionParent(edge->start, edge->end, parent);
			totalWeight += edge->weight;
		}
	}

	cout << totalWeight;
	return 0;
}