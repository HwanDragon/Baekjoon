#include <iostream>

#define CNT 100001

using namespace std;

typedef long long ll;

ll arr[CNT] = { 0, };	// 입력 배열
ll segTree[CNT * 4] = { 0, };	// 세그먼트 트리 배열
ll lazy[CNT * 4] = { 0, };	// lazy propagation 

// 세그먼트 트리 초기화
ll init(int start, int end, int node)
{
	if (start == end) return segTree[node] = arr[start];
	int mid = (start + end) / 2;
	return segTree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);
}

// 현재노드에 lazy 배열 반영, 자식노드가 있으면 자식에 상속함
void updateLazyPropagation(int start, int end, int node)
{
	if (lazy[node] == 0) return;

	segTree[node] += (ll)(end - start + 1) * lazy[node];
	if (start != end)
	{
		lazy[node * 2] += lazy[node];
		lazy[node * 2 + 1] += lazy[node];
	}
	lazy[node] = 0;
}

// 구간업데이트
void update(int start, int end, int left, int right, int diff, int node)
{
	updateLazyPropagation(start, end, node);

	// 구간에 포함되지 않는 경우
	if (end < left || right < start) return;

	// 구간에 완전히 포함되는 경우
	if (left <= start && end <= right)
	{
		lazy[node] = diff;
		updateLazyPropagation(start, end, node);
		return;
	}

	// 구간에 걸쳐있는 경우 분할정복으로 갱신
	int mid = (start + end) / 2;
	update(start, mid, left, right, diff, node * 2);
	update(mid + 1, end, left, right, diff, node * 2 + 1);
	segTree[node] = segTree[node * 2] + segTree[node * 2 + 1];	// 현재 노드 갱신
}

ll getValue(int start, int end, int index, int node)
{
	updateLazyPropagation(start, end, node);

	// 구간에 포함되지 않는 경우
	if (index < start || index > end) return 0;

	// 구간에 완전히 포함되는 경우
	if (start <= index && index <= end)
	{
		if (start == end) return segTree[node];	// 구간이 완전히 같은경우
		else
		{
			// 구간에 포함되는 경우
			int mid = (start + end) / 2;
			return getValue(start, mid, index, node * 2) + getValue(mid + 1, end, index, node * 2 + 1);
		}
	}

	return 0;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	int n, m;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 세그먼트 트리 초기화
	init(1, n, 1);

	int a, b, c, d;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> a;
		if (a == 1)
		{
			// range update
			cin >> b >> c >> d;
			update(1, n, b, c, d, 1);
		}
		else
		{
			// get value
			cin >> b;
			cout << getValue(1, n, b, 1) << "\n";
		}
	}
	
	return 0;
}