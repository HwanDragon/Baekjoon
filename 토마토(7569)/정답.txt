#include <iostream>
#include <queue>

#define CNT 101
#define INF 1000000000

using namespace std;

int m, n, h;	//가로, 세로, 높이
int arr[CNT][CNT][CNT] = { 0, };	// 토마토 정보 저장
int dp[CNT][CNT][CNT] = { 0, };	// BFS 탐색 결과 저장
int dx[6] = { 0, 0, 1, -1, 0, 0};
int dy[6] = { 1, -1, 0, 0, 0, 0};
int dz[6] = { 0, 0, 0, 0, -1, 1};

void bfs()
{
	queue<pair<pair<int, int>, int>> q; //	{x, y, z}

	// 익은 토마토 정보 저장
	for (int z = 0; z < h; z++)
		for (int y = 0; y < n; y++)
			for (int x = 0; x < m; x++)
				if (arr[z][y][x] == 1)
				{
					q.push({ {x, y}, z });
					dp[z][y][x] = 0;
				}
					
	// BFS 탐색 시작
	while (q.empty() == false)
	{
		pair<pair<int, int>, int> p = q.front();
		q.pop();
		int curX = p.first.first;
		int curY = p.first.second;
		int curZ = p.second;

		for (int i = 0; i < 6; i++)
		{
			int nextX = curX + dx[i];
			int nextY = curY + dy[i];
			int nextZ = curZ + dz[i];

			// 배열 범위 초과
			if (nextX < 0 || nextY < 0 || nextZ < 0 || nextX >= m || nextY >= n || nextZ >= h) continue;

			// 이미 익은 토마토거나 토마토가 없는 공간일 경우
			if (arr[nextZ][nextY][nextX] == -1 || arr[nextZ][nextY][nextX] == 1) continue;

			if (dp[nextZ][nextY][nextX] != INF) continue;	// 이미 방문한 지역일 경우

			q.push({{ nextX, nextY }, nextZ});
			dp[nextZ][nextY][nextX] = dp[curZ][curY][curX] + 1;
		}
	}
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// DP 배열 초기화
	for (int z = 0; z < CNT; z++)
		for (int y = 0; y < CNT; y++)
			for (int x = 0; x < CNT; x++)
				dp[z][y][x] = INF;

	// 사용자 입력 받음
	cin >> m >> n >> h;
	for (int z = 0; z < h; z++)
		for (int y = 0; y < n; y++)	
			for (int x = 0; x < m; x++)
				cin >> arr[z][y][x];
	
	// BFS 탐색 시작
	bfs();

	// 토마토가 익는데 걸리는 최대값 찾음
	int maxValue = -1;
	for (int z = 0; z < h; z++)
	{
		for (int y = 0; y < n; y++)
		{
			for (int x = 0; x < m; x++)
			{
				if (arr[z][y][x] == -1) continue;	// 토마토가 없는곳은 pass
				if (dp[z][y][x] == INF)	// 토마토가 있는데 계산 안된 지역(익을 수 없는 토마토가 존재)
				{
					cout << -1;
					return 0;
				}

				maxValue = max(maxValue, dp[z][y][x]);
			}
		}
	}

	cout << maxValue;
	return 0;
}