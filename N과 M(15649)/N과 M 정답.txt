#include <iostream>

using namespace std;
// 백준 15649

// 백트래킹 문제로 재귀함수를 이용하여 문제를 해결한다.
// 문제 해결방법은 다음과 같다
// n이 최대 8이고, n개의 수 (1~8) 을 사용중인지 저장 할 배열이 필요하다 
// 
// 배열인덱스 : [0, 1, 2, 3, 4, 5, 6, 7, 8]
// 배열저장값 : [0, 0, 3, 1, 2, 0, 0, 0, 0]
// 
// 배열저장값은 현재 탐색중인 인덱스에 depth를 추가한것이다.
// 즉, depth가 1이라는 말은 가장 처음에 탐색한 것이며 1부터 순서대로 m까지 출력되어야 한다.
// 위의 예제에서는 3 4 2 가 출력되는 것이다.
// 
// 그리고 수가 중복되지 않으므로 배열 저장값이 0이 아니면 지나치면 됨
// 

int usingNum[8 + 1] = { 0, };
int n, m;

void search(int depth)
{
	if (depth > m)	// 최대 m개를 출력해야 하는데 초과하였으므로 출력하고 return함
	{
		// 배열안의 순서에 맞게 출력
		for (int i = 1; i <= 8; i++)
		{
			for (int j = 1; j <= 8; j++)
				if (usingNum[j] == i) cout << j << " ";
		}
		cout << "\n";
		return;
	}

	for (int i = 1; i <= n; i++)
	{
		if (usingNum[i] == 0)
		{
			usingNum[i] = depth;	// 출력할 순서 저장
			search(depth + 1);	// depth를 1증가시켜 다시 재귀호출
			usingNum[i] = 0;	// 재귀가 끝나면 원상복귀
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	search(1);

	return 0;
}