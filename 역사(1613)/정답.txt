#include <iostream>

#define INF 100000000

using namespace std;

int dists[401][401] = { 0, };
int results[401][401] = { 0, };
int n, k, s;

void floydWarshall()
{
	// 초기화
	for (int i = 0; i <= n; i++)
	{
		for (int j = 0; j <= n; j++)
		{
			results[i][j] = dists[i][j];
		}
	}

	// 자기자신으로의 비용 0으로 초기화
	for (int i = 1; i <= n; i++) results[i][i] = 0;

	// 플로이드 와샬 알고리즘 수행
	for (int k = 1; k <= n; k++)
	{
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (results[i][j] > results[i][k] + results[k][j])
				{
					results[i][j] = results[i][k] + results[k][j];
				}
			}
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	for (int i = 0; i <= 400; i++)
	{
		for (int j = 0; j <= 400; j++)
		{
			dists[i][j] = INF;
		}
	}

	cin >> n >> k;
	int first, second;
	for (int i = 0; i < k; i++)
	{
		cin >> first >> second;
		dists[first][second] = 1;
	}

	// 플로이드 와샬 알고리즘 수행
	floydWarshall();

	cin >> s;
	for (int i = 0; i < s; i++)
	{
		cin >> first >> second;
		if ((results[first][second] == INF) && (results[second][first] == INF))
		{
			cout << 0 << "\n";
		}
		else if ((results[first][second] == INF) && (results[second][first] != INF))
		{
			cout << 1 << "\n";
		}
		else
		{
			cout << -1 << "\n";
		}
	}

	return 0;
}