#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

#define CNT 100001
#define NUM_RANGE 1000001

using namespace std;

/*
Mo's 알고리즘을 이용하여 1~1000000 사이의 수가 몇개나 나오는지 카운팅함
O((N+M) * sqrt(N)) 이므로 Mo's 시간복잡도는 충분함
nums 배열에 쿼리 구간에 해당 수가 몇개나 있는지 카운팅하고, nums[i]가 0일경우 결과값을 하나 빼고, 1이 되는순간 카운팅함
*/

int n, m, blockSize;	// 수열 크기, 쿼리 개수, 블럭 사이즈
int arr[CNT];	// 수열 저장
int nums[NUM_RANGE];	// 해당 값의 범위를 가진 수가 몇개있는지 저장
int answer[CNT];	// 오프라인 i번째 쿼리 결과값 저장

// 쿼리 
typedef struct Query {
	int l;	// 쿼리 시작 구간
	int r;	// 쿼리 종료 구간
	int index;	// 쿼리 순서 인덱스
};

// 쿼리 저장
vector<Query*> v;

/*
쿼리 시작 블록구간값으로 정렬하고, 블록구간값이 같을경우 끝값으로 정렬함
*/
bool cmp(Query *f, Query *s)
{
	if ((f->l / blockSize) != (s->l / blockSize))
		return (f->l / blockSize) < (s->l / blockSize);
	else
		return f->r < s->r;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 수열 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 쿼리 질의
	cin >> m;
	int l, r;
	for (int i = 0; i < m; i++)
	{
		Query* q = (Query*)malloc(sizeof(Query));
		cin >> q->l >> q->r;
		q->index = i;
		v.push_back(q);	// 쿼리 저장
	}

	// 블럭 구간 사이즈 계산
	blockSize = sqrt(n);

	// 쿼리 정렬
	sort(v.begin(), v.end(), cmp);

	// Mo's 알고리즘을 이용하여 쿼리 구간에 수가 몇개있는지 계산해나감
	int lp = 0, rp = 0, sum = 0, len = v.size();
	for (int i = 0; i < len; i++)
	{
		Query* query = v.at(i);
		while (query->l < lp)	
		{
			int t = arr[--lp];
			if (nums[t] == 0) sum++;	// 기존에 없던 수가 추가될경우 sum을 증가시킴
			nums[t]++;	// 해당 수가 몇개인지 카운팅함
		}

		while (query->l > lp)
		{
			int t = arr[lp++];
			nums[t]--;
			if (nums[t] == 0) sum--;	// 해당 수가 구간안에 더이상 존재하지 않을경우 sum을 감소시킴
		}

		while (query->r < rp)
		{
			int t = arr[rp--];
			nums[t]--;
			if (nums[t] == 0) sum--;	// 해당 수가 구간안에 더이상 존재하지 않을경우 sum을 감소시킴
		}

		while (query->r > rp)
		{
			int t = arr[++rp];
			if (nums[t] == 0) sum++;	// 기존에 없던 수가 추가될경우 sum을 증가시킴
			nums[t]++;
		}

		answer[query->index] = sum;	// 결과값 저장
	}

	// 결과 출력
	for (int i = 0; i < m; i++)
		cout << answer[i] << "\n";

	return 0;
}