#include <iostream>
/*

coin [1, 5, 12] 를 이용하여 만들 수 있는 k원 나열

 coin/i	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
	1	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
	5	0	0	0	0	1	2	3	4	5	2	3	4	5	6	3
	12	0	0	0	0	0	0	0	0	0	0	0	1	2	3	4

[1, 5, 12]원을 이요할 때 최소값 변화

total1	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
total5	1	2	3	4	1	2	3	4	5	2	3	4	5	6	3
total12	1	2	3	4	1	2	3	4	5	2	3	1	2	3	3

dp[n] = min(dp[n], dp[n - coin])
*/
#define INF 1000000000

using namespace std;

int dp[100001];	// dp[k] : k원을 만들 때 가장 적게 코인을 사용할 수 있는 최소개수
int coins[101];	// 동전의 종류 저장

int main()
{
	// 초기화(최소값을 찾아야하므로 무한대로 초기화)
	fill(dp, dp + 100001, INF);

	// 사용자 입력 받음
	int n, k;
	cin >> n >> k;
	for (int i = 1; i <= n; i++)
	{
		cin >> coins[i];
		dp[coins[i]] = 1;	// 해당 코인을 이용하면 1개로 최소개수 가능
	}
		
	for (int i = 1; i <= n; i++)
	{
		int coin = coins[i];	// 동전을 하나씩 확인
		for (int j = coin; j <= k; j++)
		{
			dp[j] = min(dp[j - coin] + 1, dp[j]);
		}
	}

	if (dp[k] == INF)	// k원을 만드는게 불가능 할 경우
		cout << -1;
	else
		cout << dp[k];

	return 0;
}