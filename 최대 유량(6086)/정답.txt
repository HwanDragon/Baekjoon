#include <iostream>
#include <queue>
#include <vector>

#define INF 1000000000
#define NODE_COUNT 52	// 0~25 ('A' ~ 'Z') , 26 ~ 51 ('a' ~ 'z')

using namespace std;

int n;	// 노드 수
vector<int> edges[NODE_COUNT ];	// 간선정보
int capacity[NODE_COUNT][NODE_COUNT] = { 0, };	// 용량정보
int flow[NODE_COUNT ][NODE_COUNT] = { 0, };	// 유량정보
int prevNode[NODE_COUNT] = { 0, };	// 이전노드 정보

// 에드몬드 카프 알고리즘 수행
int maxFlow(int start, int end)
{
	int result = 0;
	while (true)
	{
		// BFS로 start노드에서 end노드까지 경로 찾음
		fill(prevNode, prevNode + NODE_COUNT, -1);
		queue<int> q;
		q.push(start);
		while (q.empty() == false && prevNode[end] == -1)
		{
			int cur = q.front();
			q.pop();
			for (int i = 0; i < edges[cur].size(); i++)
			{
				int next = edges[cur].at(i);
				if (prevNode[next] != -1)	continue;

				if (capacity[cur][next] - flow[cur][next] > 0)
				{
					prevNode[next] = cur;
					q.push(next);
					if (next == end) break;
				}
			}
		}

		if (prevNode[end] == -1) break;	// 시작점에서 끝점까지 도달 할 수 없을경우(더이상 경로가 없음)

		// 경로중 흐를 수 있는 가장 작은 유량 찾기
		int minFlow = INF;
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			minFlow = min(minFlow, capacity[prev][i] - flow[prev][i]);
		}

		// start 에서 end까지 최소유량을 흘려보내주고, 유량(flow)값을 갱신시킴
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			flow[prev][i] += minFlow;
			flow[i][prev] -= minFlow;	// 음의유량 계산
		}

		result += minFlow;
	}
	return result;
}

int main()
{
	// 사용자 입력 받음
	cin >> n;
	char first, second ;
	int f, s, weight;
	for (int i = 0; i < n; i++)
	{
		cin >> first >> second >> weight;
		if (('A' <= first) && (first <= 'Z'))
			f = first - 'A';
		else
			f = first - 'a' + 26;

		if (('A' <= second) && (second <= 'Z'))
			s = second - 'A';
		else
			s = second - 'a' + 26;

		edges[f].push_back(s);
		edges[s].push_back(f);
		capacity[f][s] += weight;	// 파이프는 양방향으로 흐를 수 있음(같은 노드값도 중복 가능한듯)
		capacity[s][f] += weight;	// 파이프는 양방향으로 흐를 수 있음(같은 노드값도 중복 가능한듯)
	}

	cout << maxFlow(0, 25);

	return 0;
}