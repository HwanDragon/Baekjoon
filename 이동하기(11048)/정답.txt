#include <iostream>

#define CNT 1001

/*
n, m까지 최대 주울 수 있는 사탕을 계산하면 되므로, 
점화식은

dp[n][m] = max(dp[n - 1][m], dp[n][m - 1]) + map[n][m];
*/

using namespace std;

int n, m;
int map[CNT][CNT] = { 0, };
int dp[CNT][CNT] = { 0, };
int dx[2] = { 0, -1 };	// 위, 왼쪽 탐색
int dy[2] = { -1, 0 };	// 위, 왼쪽 탐색

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	for (int y = 0; y < n; y++)
		for (int x = 0; x < m; x++)
			cin >> map[y][x];

	// dp 배열 초기화
	for (int y = 0; y < n; y++)
		for (int x = 0; x < m; x++)
			dp[y][x] = map[y][x];

	// Bottom-up 방식으로 계산
	for (int y = 0; y < n; y++)
	{
		for (int x = 0; x < m; x++)
		{
			for (int i = 0; i < 2; i++)
			{
				int tempX = x + dx[i];
				int tempY = y + dy[i];

				if (tempX < 0 || tempY < 0) continue;	// 배열 범위 초과

				dp[y][x] = max(dp[y][x], dp[tempY][tempX] + map[y][x]);
			}
		}
	}

	cout << dp[n - 1][m - 1];

	return 0;
}