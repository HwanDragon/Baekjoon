#include <iostream>
#include <cmath>

/*
수 A, B 사이에 어떤 소수의 n제곱이 포함되어 해당 n제곱에 해당하는 수의 개수를 찾아야함
n제곱(n >= 2)에서 n이 2보다 커야하므로, 즉, 주어진 최대범위(10^14)의 제곱근 까지만 소수를 미리 계산하여
해당 소수를 n제곱 했을 때, A, B 사이에 속하는지를 카운팅하면 됨.
sqrt(10^14)  = 10,000,000 이고, bool 타입으로 선언할 경우 10MB의 메모리가 필요하므로 문제 조건에 부합함
*/

#define CNT 10000001

using namespace std;

typedef long long ll;

ll minValue, maxValue;	// 수의  범위
bool isPrime[CNT];

// 에라토스테네스의 체를 이용하여 미리 소수를 계산해둠
void calc()
{
	fill(isPrime, isPrime + CNT, true);	// 모든 수를 소수로 초기화
	isPrime[1] = false;	// 1은 소수가 아님

	int j;
	for (int i = 2; i <= sqrt(CNT); i++)	// 최대 CNT의 sqrt 까지만 계산
	{
		if (isPrime[i] == false) continue;	// 한번이라도 계산된 소수일 경우 pass

		j = i * 2;	// 소수의 2, 3, 4, ... 배까지 모두 소수가 아니라고 체크
		while (j < CNT)
		{
			isPrime[j] = false;
			j += i;
		}
	}
}

int main()
{
	// 에라토스테네스의 체를 이용하여 소수 미리 계산
	calc();

	int result = 0;
	cin >> minValue >> maxValue;	// 왼쪽 범위, 오른쪽범위 수 입력받음
	for (int i = 2; i <= sqrt(maxValue); i++)
	{
		if (isPrime[i] == false) continue;	// 소수가 아닐경우 pass

		int n = 2;	// 소수를 n제곱 해서 계산해나감(초기값은 2)
		double nPrime = pow(i, n);	// 소수의 n제곱부터 검토(long long 으로 하면 오버플로우남)
		while (nPrime <= maxValue)	// n제곱한 수는 오른쪽 범위보다 작아야 함
		{
			if (nPrime >= minValue)	// minValue와 maxValue 사이에 속할경우 카운팅
				result++;

			n++;	
			nPrime = pow(i, n);
		}
	}

	cout << result;

	return 0;
}