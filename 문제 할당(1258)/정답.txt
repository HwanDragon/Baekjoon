#include <iostream>
#include <queue>
#include <vector>

#define INF 1000000000

#define SOURCE 0	// 시작점 SOURCE 를 0으로 설정
#define SINK 201	// 도착점 SINK를 201로 설정
#define NODE_CNT 203	// 0:SOURCE, 201:SINK, 1~100:학생, 101~200:문제

using namespace std;

int n;
int capacity[NODE_CNT][NODE_CNT];	// 용량 정보
int flow[NODE_CNT][NODE_CNT];	// 현재 흐르고있는 유량 정보
vector<int> edges[NODE_CNT];	// 간선 정보
int costs[NODE_CNT][NODE_CNT];	// 비용 정보
int dists[NODE_CNT];	// 최단거리 탐색을 위한 비용 정보 
int prevNode[NODE_CNT];	// 경로 저장
bool inQueue[NODE_CNT];	// 큐에 추가되었는지 여부 (SPFA 최단경로 탐색)

int mcmf(int start, int end)
{
	int result = 0;
	while (true)
	{
		// 초기화
		fill(inQueue, inQueue + NODE_CNT, false);
		fill(prevNode, prevNode + NODE_CNT, -1);
		fill(dists, dists + NODE_CNT, INF);

		// 시작점 큐에 추가
		queue<int> q;
		q.push(start);	// 큐에 추가
		inQueue[start] = true;	// 큐에 추가여부 설정
		dists[start] = 0;	// 시작점 비용 0으로 세팅

		// SPFA 최단경로 탐색
		while (q.empty() == false)
		{
			int cur = q.front();
			q.pop();
			inQueue[cur] = false;	// 큐에서 꺼냈으므로 false로 설정

			// 최단 거리 탐색
			for (int i = 0; i < edges[cur].size(); i++)
			{
				int next = edges[cur].at(i);	// 다음 노드
				int cost = costs[cur][next];	// 현재 노드(cur)에서 다음노드(next) 까지 가는데 드는 비용
				if (dists[next] > dists[cur] + cost && capacity[cur][next] - flow[cur][next] > 0)
				{
					dists[next] = dists[cur] + cost;	// 최단경로 갱신
					prevNode[next] = cur;	// 이전 노드 저장
					if (inQueue[next] == true) continue;

					q.push(next);
					inQueue[next] = true;
				}
			}
		}

		if (prevNode[end] == -1) break;		// 시작점에서 도착점까지 더이상 도달 경로가 없음

		// 찾은 경로에서 흘릴 수 있는 최소 유량 찾음
		int minFlow = INF;
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			minFlow = min(minFlow, capacity[prev][i] - flow[prev][i]);
		}

		// 해당 경로로 유량을 실제로 흘려보냄
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			flow[prev][i] += minFlow;
			flow[i][prev] -= minFlow;
			result += minFlow * costs[prev][i];	// 결과 저장
		}
	}
	return result;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 학생 노드와 SOURCE 연결(용량은 1(학생 한명당 한 문제까지 풀 수 있음))
	for (int i = 1; i <= 100; i++)
	{
		edges[SOURCE].push_back(i);
		edges[i].push_back(SOURCE);
		capacity[SOURCE][i] = 1;
		costs[SOURCE][i] = 0;	// 비용은 0
	}

	// 문제와 SINK 연결(용량은 1(학생 한명당 한 문제까지 풀 수 있음))
	// 문제 : 101~200
	for (int i = 101; i <= 200; i++)
	{
		edges[i].push_back(SINK);
		edges[SINK].push_back(i);
		capacity[i][SINK] = 1;
		costs[i][SINK] = 0;	// 비용은 0
	}

	cin >> n;
	int a;
	// i번째 학생이 j번 문제를 푸는데 걸리는 시간
	for (int i = 1; i <= n; i++)
	{
		for (int j = 101; j <= 100 + n; j++)
		{
			cin >> a;
			// 학생과 문제 연결
			edges[i].push_back(j);
			edges[j].push_back(i);

			// 용량 설정
			capacity[i][j] = 1;

			// 비용 저장
			costs[i][j] = a;
			costs[j][i] = -a;
		}
	}

	// 최소비용 최대유량 계산
	cout << mcmf(SOURCE, SINK);
	return 0;
}