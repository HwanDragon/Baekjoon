#include <iostream>

#define CNT 100001
#define SEG_CNT CNT*4

/*
해당 문제는 구간 [a b]에 별이 1개씩 증가하는 등차수열의 형태로 별이 떨어지고,
i 번째에 떨어진 별의 개수를 계산하는 문제이다.

별이 하나씩 증가하는 형태는 세그먼트 트리로 계산할 수 없으므로
해당 문제를 등차수열의 형태로 변형하여 생각해야한다.
[a b] 구간에 별이 1개씩 떨어지고, 
b 구간에 떨어진 별의 개수는 [1 b] 구간에 떨어진 모든 별의 개수를 새면 된다.
다만 위의 방법으로 구간 쿼리를 계산하면 (b + 1) 구간은 별이 떨어지지 않았는데
(b - a + 1)개 만큼의 별이 더해지므로 (b + 1) 구간은 (b - a + 1)개의 별을 빼주면 된다.
그 후 특정 구간에 떨어진 별의 개수는 [1 n] 으로 계산하면 됨
*/

using namespace std;

typedef long long ll;

int n, q;
int arr[CNT];	// 수열
ll segTree[SEG_CNT];	// 세그먼트 트리
ll lazy[SEG_CNT];	// Lazy propagation 을 저장할 배열

// Lazy Propagation update
void updateLazy(int start, int end, int node)
{
	if (lazy[node] == 0) return;

	segTree[node] += (end - start + 1) * lazy[node];
	if (start != end)
	{
		lazy[node * 2] += lazy[node];
		lazy[node * 2 + 1] += lazy[node];
	}
	lazy[node] = 0;
}

void update(int start, int end, int left, int right, int node, int value)
{
	// Lazy propagation 적용
	updateLazy(start, end, node);

	// 구간에 포함되지 않을 경우
	if (end < left || right < start) return;

	// 구간에 완전히 포함될 경우
	if (left <= start && end <= right)
	{
		lazy[node] += value;
		updateLazy(start, end, node);
		return;
	}

	// 구간에 걸쳐있을 경우
	int mid = (start + end) / 2;
	update(start, mid, left, right, node * 2, value);
	update(mid + 1, end, left, right, node * 2 + 1, value);
	segTree[node] = segTree[node * 2] + segTree[node * 2 + 1];
}

ll query(int start, int end, int left, int right, int node)
{
	// Lazy propagation 적용
	updateLazy(start, end, node);

	// 구간에 포함되지 않을경우
	if (end < left || right < start) return 0;

	// 구간에 완전히 포함되는 경우
	if (left <= start && end <= right) return segTree[node];
	
	// 구간에 걸쳐있는 경우
	int mid = (start + end) / 2;
	return query(start, mid, left, right, node * 2) + query(mid + 1, end, left, right, node *2  + 1);
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 쿼리 질의
	cin >> q;
	int a, b, c;
	for (int i = 1; i <= q; i++)
	{
		cin >> a;
		if (a == 1)
		{
			cin >> b >> c;
			// [b, c] 구간에 별이 1개씩 증가하는 등차수열 형태로 떨어지므로 
			// [b, c] 구간에 모두 별을 한개씩 떨어뜨리고
			// c구간에 떨어진 별은 [1, c] 로 계산 할 수 있음
			update(1, n, b, c, 1, 1);	

			// [b, c] 구간에 별이 1개씩 떨어진걸 구간합으로 계산하게되면
			// c 다음구간에는 별이 떨어지지 않았는데 별의 개수가 더 추가되게 되므로
			// c + 1 구간(c 다음 구간) 부터는 추가된 별의 개수만큼 빼줌  -(c - b + 1)개 만큼 빼줘야함
			update(1, n, c + 1, c + 1, 1, -(c - b + 1));
		}
		else
		{
			cin >> b;
			cout << arr[b] + query(1, n, 1, b, 1) << "\n";
		}
	}

	return 0;
}