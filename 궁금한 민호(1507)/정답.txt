#include <iostream>
#include <queue>

using namespace std;

int n;
int dists[21][21] = { 0, };	// 플로이드 와샬 알고리즘으로 구한 최단경로
int results[21][21] = { 0, };	// 필요없는 간선정보를 제거한 결과배열

int main()
{
	// 사용자 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			cin >> dists[i][j];
			results[i][j] = dists[i][j];
		}
	}

	/*
	i에서 j로 갈 때 k노드를 거쳐갈 때와 거쳐가지 않을때 값이 같다면
	i에서 j로 가는 노드 즉, dists[i][j]가 최단거리 라는 이야기이고,
	dists[i][j]로 가는 비용과 dists[i][k] + dists[k][j] 의 비용이 같으므로
	dists[i][j]의 비용을 제거해주면 됨
	(다이나믹 프로그래밍 기법에 의해 dists[i][j]의 비용이 dists[i][k], dists[k][j]에 포함되어 있음)

	만약 dists[i][j] 의 값이 dists[i][k] + dists[k][j] 라면, 있을 수 없는 경우이므로 -1 출력.
	왜냐하면, dists[i][j]값이 더 클 경우 최단경로 계산시 dists[i][j] 값이 dists[i][k] + dists[k][j]로 초기화 됬었어야함.
	주어진 입력이 최단거리 입력이 아님.
	*/
	for (int k = 1; k <= n; k++)
	{
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (i == k || j == k) continue;

				if (dists[i][j] > dists[i][k] + dists[k][j])
				{
					cout << -1 << "\n";
					return 0;
				}

				if (dists[i][j] == dists[i][k] + dists[k][j])
				{
					results[i][j] = 0;
				}
			}
		}
	}

	// 결과값 계산
	int result = 0;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			result += results[i][j];
		}
	}

	// 무방향 그래프이므로 결과값이 양쪽에 중복되어 들어감. 2로 나누어 출력
	cout << result / 2 << "\n";	
	return 0;
}