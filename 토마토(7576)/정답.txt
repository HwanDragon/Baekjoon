#include <iostream>
#include <queue>

#define CNT 1001
#define INF 1000000000

using namespace std;

int n, m;
int map[CNT][CNT] = { 0, };	// 토마토 정보
int dp[CNT][CNT] = { 0, };	// bfs탐색시 언제익을지 계산
int dx[4] = { 0, 0, 1, -1};
int dy[4] = { 1, -1, 0, 0};

void bfs()
{
	queue<pair<int, int>> q;

	// 익은 토마토를 큐에 추가
	for (int y = 0; y < m; y++)
	{
		for (int x = 0; x < n; x++)
		{
			if (map[y][x] == 1)
			{
				q.push({ x, y });
				dp[y][x] = 0;
			}
		}
	}

	while (q.empty() == false)
	{
		pair<int, int> p = q.front();
		q.pop();
		int x = p.first;
		int y = p.second;

		for (int i = 0; i < 4; i++)
		{
			int tempX = x + dx[i];
			int tempY = y + dy[i];
			if (tempX < 0 || tempY < 0 || tempX >= n || tempY >= m) continue;	// 배열 범위 초과
			if (map[tempY][tempX] == -1) continue;	// 토마토가 없을 경우
			if (map[tempY][tempX] == 1) continue;	// 이미 익은 토마토
			if (dp[tempY][tempX] != INF) continue;	// 이미 방문한 지역

			dp[tempY][tempX] = dp[y][x] + 1;
			q.push({tempX, tempY});
		}
	}
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// dp 배열 초기화
	for (int i = 0; i < CNT; i++)
		for (int j = 0; j < CNT; j++)
			dp[i][j] = INF;


	// 사용자 입력 받음
	cin >> n >> m;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
			cin >> map[i][j];
		
	// BFS 탐색
	bfs();
	
	// 토마토가 언제익는지 확인
	int maxValue = 0;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] == 1 || map[i][j] == -1) continue;	// 이미 익은 토마토 또는 없는 경우 pass
			if (dp[i][j] == INF && map[i][j] == 0)	// 익지 않는 토마토가 있을 경우
			{
				cout << -1;
				return 0;
			}
			maxValue = max(maxValue, dp[i][j]);
		}
	}
	cout << maxValue;

	return 0;
}