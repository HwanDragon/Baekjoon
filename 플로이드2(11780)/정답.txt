#include <iostream>
#include <queue>
#define INF 100000000

using namespace std;

int dists[101][101] = { 0, };
int results[101][101] = { 0, };
int viaPoint[101][101] = { 0, };	// 중간에 거쳐가는 노드번호 저장
int n, m;
vector<int> route;

void floydWashall()
{
	// 초기화
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			results[i][j] = dists[i][j];
		}
	}

	// 자기자신으로의 비용 0으로 초기화
	for (int i = 1; i <= n; i++) results[i][i] = 0;

	// 플로이드 와샬 알고리즘 수행
	for (int k = 1; k <= n; k++)
	{
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (results[i][j] > results[i][k] + results[k][j])
				{
					results[i][j] = results[i][k] + results[k][j];
					viaPoint[i][j] = k;
				}
			}
		}
	}
}

// 경로를 찾기위해 재귀함수 사용
// route 벡터에 경로 저장
void findRoute(int start, int end)
{
	if (viaPoint[start][end] == 0)
	{
		route.push_back(start);
		route.push_back(end);
		return;
	}

	findRoute(start, viaPoint[start][end]);
	route.pop_back();
	findRoute(viaPoint[start][end], end);
}

int main()
{
	// 초기화
	for (int i = 0; i <= 100; i++)
	{
		for (int j = 0; j <= 100; j++)
		{
			dists[i][j] = INF;
		}
	}

	// 사용자 입력 받음
	cin >> n >> m;
	int first, second, weight;
	for (int i = 0; i < m; i++)
	{
		cin >> first >> second >> weight;
		dists[first][second] = min(dists[first][second], weight);
	}

	// 플로이드 와샬 알고리즘 수행
	floydWashall();

	// 결과 출력 (모든 비용 출력)
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (results[i][j] == INF)
				cout << 0 << " ";
			else
				cout << results[i][j] << " ";
		}
		cout << "\n";
	}

	// 경로 출력
	for (int i = 1; i <= n; i++)	
	{
		for (int j = 1; j <= n; j++)
		{
			// 자기자신은 0으로 출력
			if (i == j)
			{
				cout << 0 << "\n";
				continue;
			}

			// 갈 수 없는 지역
			if (results[i][j] == INF) 
			{
				cout << 0 << "\n";
				continue;
			}

			route.clear();	// 경로 초기화
			findRoute(i, j);	// 경로 찾기

			// 경로 출력
			cout << route.size() << " ";
			for (int index = 0; index < route.size(); index++)
			{
				cout << route.at(index) << " ";
			}
			cout << "\n";
		}
	}

	return 0;
}