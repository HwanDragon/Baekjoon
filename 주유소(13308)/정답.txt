#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

/*
만약 오일값이 k원인 노드를 들렸을 경우, 그 다음노드에서 k원보다 기름값이 클 경우
k원 보다 큰 곳에서는 기름값을 그냥 k라고 두고 계산해도 무방하다(기름값이 k원인 곳에서 그만큼 더 충전을 하면 되기 때문)

고려해야 할 것은 다른 노드로 갔다가, 오일 비용이 더 적은곳에서 기름을 충전한 뒤, 출발점으로 다시 돌아올 수 있다.
따라서, 최단거리를 계산할 dists배열을 1차원으로 만들면 기름값이 더 적은 노드를 들리고 다시 이전노드로 돌아올 경우를
계산할 수 없다.

따라서 dists[노드][오일값] 으로 2차원 배열을 선언 한 뒤,
dists[노드][오일값] 에는 i번째 노드에 k원의 오일값 일 때 도착 할 수 있는 최소 비용을 저장해야 한다.
따라서 처음 시작은 1번노드부터 하므로
dists[1][oil[1]] = 0
으로 두고 다익스트라 알고리즘을 수행하면 된다.
*/

#define NODE_CNT 2501
#define OIL_COST 2501
#define INF 1e15

using namespace std;

typedef long long ll;

int n, m;
vector<pair<int, int>> edges[NODE_CNT];	// 간선정보	 -> pair<nextNode, cost>
ll dists[NODE_CNT][OIL_COST];	// i번째 노드에 오일을 c의 비용으로 도착했을 때 최소값
int oil[NODE_CNT];	// i번째 노드의 기름값

struct cmp {
	bool operator() (pair<pair<int, int>, ll>& f, pair<pair<int, int>, ll>& s) {
		return f.second > s.second;
	}
};

void dijkstra(int node)
{
	// pair<pair<int, int>, int> -> // i번째 노드에 k의 oil 비용일 때 cost 최소값
	priority_queue<pair<pair<int, int>, ll>, vector<pair<pair<int, int>, ll>>, cmp> pq;
	dists[node][oil[1]] = 0;
	pq.push({ {node, oil[1]}, 0 });
	while (pq.empty() == false)
	{
		int cur = pq.top().first.first;	// 현재 노드	
		int oilCost = pq.top().first.second;	// 현재노드의 oilCost 의 비용
		ll dist = pq.top().second;	// 현재노드에 oilCost값으로 왔을 때 최소비용
		pq.pop();

		if (dists[cur][oilCost] < dist) continue;	// 최단거리가 아님

		for (int i = 0; i < edges[cur].size(); i++)
		{
			pair<int, int> np = edges[cur].at(i);
			int next = np.first;
			int nextDist = np.second * oilCost;	// 다음 노드까지 거리 * 비용
			if (dists[next][oilCost] > dist + nextDist)
			{
				dists[next][oilCost] = dist + nextDist;
				int nextOilCost = min(oilCost, oil[next]);
				pq.push({ {next, nextOilCost}, dist + nextDist });
			}
		}
	}
}

int main()
{
	// 초기화
	for (int i = 0; i < NODE_CNT; i++)
		for (int j = 0; j < OIL_COST; j++)
			dists[i][j] = INF;

	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> oil[i];

	// 간선 정보 생성
	int f, s, t;
	for (int i = 0; i < m; i++)
	{
		cin >> f >> s >> t;
		edges[f].push_back({ s, t });
		edges[s].push_back({ f, t });
	}

	// 다익스트라 알고리즘 수행
	dijkstra(1);

	// n번 노드까지 가는데 걸리는 최소비용 찾음
	ll minValue = INF;
	for (int i = 0; i < OIL_COST; i++)
		minValue = min(minValue, dists[n][i]);

	// 결과 출력
	cout << minValue;
	return 0;
}