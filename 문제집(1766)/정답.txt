#include <vector>
#include <iostream>
#include <queue>

#define CNT 32001

using namespace std;

/*
먼저 풀어야 하는 문제가 없는 경우(진입차수가 0인 항목)
해당 문제를 우선순위큐에 추가하여 문제 난이도가 더 쉬운 문제부터 우선적으로 풀어야함
*/

int n, m;
vector<int> edges[CNT];	// 간선정보 저장
int degree[CNT];	// 진입차수 저장

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	int f, s;
	for (int i = 0; i < m; i++)
	{
		cin >> f >> s;
		edges[f].push_back(s);	// 간선정보 생성
		degree[s]++;	// 진입차수 계산
	}

	// 최소힙 기반의 우선순위 큐 선언(쉬운 문제부터 우선적으로 풀어야 함)
	priority_queue<int, vector<int>, greater<>> pq;

	// 진입차수가 0인 항목 우선순위큐에 추가
	for (int i = 1; i <= n; i++)
	{
		if (degree[i] == 0)
			pq.push(i);
	}

	// 위상정렬 수행
	while (pq.empty() == false)
	{
		int cur = pq.top();	// 현재 노드(문제 번호)
		pq.pop();
		
		cout << cur << " ";	// 문제 번호 출력

		for (int i = 0; i < edges[cur].size(); i++)
		{
			int nextNode = edges[cur].at(i);	// 다음 문제
			degree[nextNode]--;	// 진입차수 감소
			if (degree[nextNode] == 0)	// 진입차수가 0일경우
			{
				pq.push(nextNode);	// 풀어야 하는 순서를 하나 증가시키고, 우선순위큐에 추가
			}
		}
	}

	return 0;
}