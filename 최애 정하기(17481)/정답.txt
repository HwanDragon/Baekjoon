#include <iostream>
#include <vector>
#include <map>

/*
이분매칭 알고리즘을 이용하여 친구와 걸그룹을 매칭시키고,
모든 친구가 다 매칭되지 않았을경우 NO 출력
*/

#define FRIEND_CNT 1001
#define GIRL_GROUP_CNT 1001

using namespace std;

int n, m;
map<string, int> girlGroup;	// 걸그룹 이름을 인덱스와 매칭시키기 위해 map 자료구조 이용
vector<int> edges[FRIEND_CNT];	// 간선정보 저장
bool visited[FRIEND_CNT];	// 이분매칭 알고리즘을 위한 노드 방문여부 저장
int prevNode[GIRL_GROUP_CNT];	// 걸그룹과 매칭된 사람 정보 저장

// 이분매칭 알고리즘 수행
bool dfs(int node)
{
	if (visited[node] == true) return false;	// 이미 방문한 노드는 pass

	visited[node] = true;
	for (int i = 0; i < edges[node].size(); i++)
	{
		int next = edges[node].at(i);
		// 매칭되지 않았거나 연결된 노드가 다른 노드와 매칭 가능할 경우
		if (prevNode[next] == false || dfs(prevNode[next]))	
		{
			prevNode[next] = node;
			return true;
		}
	}
	return false;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	string name;
	for (int i = 1; i <= m; i++)
	{
		cin >> name;
		girlGroup.insert({ name, i});
	}

	// 걸그룹 정보를 입력받아 간선정보 생성
	int c;
	for (int i = 1; i <= n; i++)
	{
		cin >> c;
		for (int j = 1; j <= c; j++)
		{
			cin >> name;
			int girlGroupNum = girlGroup.find(name)->second;
			edges[i].push_back(girlGroupNum);
		}
	}

	// 이분매칭 알고리즘 수행
	int cnt = 0;
	for (int i = 1; i <= n; i++)
	{
		fill(visited, visited + FRIEND_CNT, false);
		if (dfs(i) == true) cnt++;
	}

	// 결과 출력
	if (cnt == n)
		cout << "YES";
	else
	{
		cout << "NO\n";
		cout << cnt;
	}

	return 0;
}