#include <iostream>
#include <queue>
#include <vector>

#define NODE_COUNT 100001

using namespace std;

int n;
vector<int> edges[NODE_COUNT];	// 간선정보 저장
int parents[NODE_COUNT] = { 0, };	// 부모노드 저장

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n;
	int first, second;
	for (int i = 0; i < n - 1; i++)
	{
		cin >> first >> second;
		edges[first].push_back(second);
		edges[second].push_back(first);
	}

	// 부모노드 탐색을 위한 bfs 시작
	queue<int> q;
	q.push(1);
	parents[1] = 1;	// 1번노드의 부모는 자기자신으로 저장
	while (q.empty() == false)
	{
		int cur = q.front();	// 큐에서 하나 꺼냄
		q.pop();
		for (int i = 0; i < edges[cur].size(); i++)	// 꺼낸 노드에서 연결된 간선들 탐색
		{
			int next = edges[cur].at(i);
			if (parents[next] != 0) continue;	// 이미 방문한 노드는 pass

			parents[next] = cur;	// 탐색한 노드의 부모로 현재 노드 저장
			q.push(next);
		}
	}

	// 결과 출력
	for (int i = 2; i <= n; i++)
		cout << parents[i] << "\n";

	return 0;
}