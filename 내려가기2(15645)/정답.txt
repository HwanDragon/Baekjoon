#include <iostream>

#define CNT 100001

using namespace std;

int arr[CNT][3] = { 0, };	// 수열 저장
int maxDp[CNT][3] = { 0, };	// 최대값을 계산할 dp배열
int minDp[CNT][3] = { 0, };	// 최소값을 계산할 dp배열

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < 3; j++)
			cin >> arr[i][j];
		
	// (i, j) -> i번째 행, j번째 열이라고 할 때
	// (i, 0)행은 (i - 1, 0) 또는 (i - 1, 1) 에서만 올 수 있음, 즉 두 수중 더 큰값을 취하면 됨
	// (i, 1)행은 (i - 1, 0) 또는 (i - 1, 1) 또는 (i - 1, 2) 에서 올 수 있음, 즉 세 수중 더 큰값을 취하면 됨
	// (i, 2)행은 (i - 1, 1) 또는 (i - 1, 2) 에서만 올 수 있음, 즉 두 수중 더 큰값을 취하면 됨
	// 최소값은 위의 조건들에서 min값을 취하면 됨
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			maxDp[i][0] = max(maxDp[i - 1][0], maxDp[i - 1][1]) + arr[i][0];
			maxDp[i][1] = max(max(maxDp[i - 1][0], maxDp[i - 1][1]), maxDp[i - 1][2]) + arr[i][1];
			maxDp[i][2] = max(maxDp[i - 1][1], maxDp[i - 1][2]) + arr[i][2];

			minDp[i][0] = min(minDp[i - 1][0], minDp[i - 1][1]) + arr[i][0];
			minDp[i][1] = min(min(minDp[i - 1][0], minDp[i - 1][1]), minDp[i - 1][2]) + arr[i][1];
			minDp[i][2] = min(minDp[i - 1][1], minDp[i - 1][2]) + arr[i][2];
		}
	}

	// 최대 / 최소 찾음
	int minValue = 1000000000;
	int maxValue = 0;
	for (int i = 0; i < 3; i++)
	{
		maxValue = max(maxValue, maxDp[n][i]);
		minValue = min(minValue, minDp[n][i]);
	}
		
	// 결과 출력
	cout << maxValue << " " << minValue;
}