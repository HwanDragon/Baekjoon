#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
int u, v;
vector<int> edges[1000001];
int nodeValues[1000001];
bool visited[1000001] = { 0, };
int dp[1000001][2] = { 0, };	// dp[n][1] -> 우수마을, dp[n][0] -> 우수마을 아님

void dfs(int nodeIndex)
{
	visited[nodeIndex] = true;
	if (edges[nodeIndex].size() == 0)	// 리프노드
	{
		dp[nodeIndex][0] = 0;
		dp[nodeIndex][1] = nodeValues[nodeIndex];
		return;
	}

	vector<int> edge = edges[nodeIndex];
	dp[nodeIndex][0] = 0;
	dp[nodeIndex][1] = nodeValues[nodeIndex];
	for (int i = 0; i < edge.size(); i++) 
	{
		int child = edge.at(i);
		if (visited[child] == true)
			continue;

		dfs(child);
		dp[nodeIndex][1] += dp[child][0];	// 부모가 우수마을이면, 자식은 우수마을이 아니어야함
		// 부모가 우수마을이 아니면, 자식은 우수마을 일수도, 아닐수도 있음
		// 그 중에서 최대값을 가져오면 됨.
		// 적어도 하나이상 우수마을과 인접해 있어야 한다는 조건은
		// 최대값을 계산하는것이기때문에 dp 계산하면서 해결됨
		// 인접한 마을들 중 우수 마을이 하나도 없을 경우 그 마을은 2번 조건을 위배하지 않고 우수 마을로 선정할 수 있고, 또한 선정하는 것이 항상 이득
		dp[nodeIndex][0] += max(dp[child][0], dp[child][1]);
	}
}

int main()
{
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cin >> nodeValues[i];
	}

	for (int i = 1; i < n; i++)
	{
		cin >> u >> v;
		
		edges[u].push_back(v);
		edges[v].push_back(u);
	}

	dfs(1);
	cout << max(dp[1][0], dp[1][1]);
	return 0;
}