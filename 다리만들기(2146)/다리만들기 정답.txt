#include <iostream>
#include <queue>

using namespace std;

int n;
bool visited[101][101] = { 0, };
int map[101][101] = { 0, };
int dp[101][101] = { 0, };
int mapNumber = 1;	// 맵을 구분하기 위한 번호 (1번부터 시작)

int result = 10001;

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, 1,-1 };

void bfs()
{
	for (int index = 1; index < mapNumber; index++)
	{
		// visited 배열 초기화
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= n; j++)
				dp[i][j] = 0;

		queue<pair<int, int>> q;	// x, y 저장

		// 번호를 붙인 육지지역이 index 값 과 같을 경우 전부 큐에 집어넣음
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (map[i][j] == index)
					q.push(make_pair(j, i));
			}
		}

		// 다른육지까지 bfs 탐색
		while (!q.empty())
		{
			int x = q.front().first;
			int y = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++)
			{
				int tempX = x + dx[i];
				int tempY = y + dy[i];

				if (tempX < 1 || tempY < 1 || tempX > n || tempY > n)	// map 범위 밖이면 pass
					continue;

				if (map[tempY][tempX] == index)	 // 같은 육지 지역 pass
					continue;

				if (dp[tempY][tempX] != 0)
					continue;

				dp[tempY][tempX] = dp[y][x] + 1;
				q.push(make_pair(tempX, tempY));

				if (map[tempY][tempX] != 0 && map[tempY][tempX] != index)
				{
					// 다른 육지를 찾음
					result = min(result, dp[tempY][tempX]);
					while (!q.empty()) q.pop();
				}
			}
		}
	}
}

// 맵 분리
void seperate(int y, int x)
{
	visited[y][x] = true;
	map[y][x] = mapNumber;
	for (int i = 0; i < 4; i++)
	{
		int tempX = x + dx[i];
		int tempY = y + dy[i];

		if (tempX < 1 || tempY < 1 || tempX > n || tempY > n)	// map 범위 밖이면 pass
			continue;

		if (map[tempY][tempX] == 0)	 // 바다지역 pass
			continue;

		if (visited[tempY][tempX] == true)	// 이미 방문했으면 pass
			continue;

		seperate(tempY, tempX);
	}
}



// A -> 65
// Z -> 90
int main()
{
	// 사용자 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			cin >> map[i][j];
		}
	}

	// map 분리
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if ((visited[i][j] == false) && (map[i][j] != 0))
			{
				seperate(i, j);
				mapNumber++;
			}
		}
	}

	bfs();

	cout << result - 1;
	return 0;
}