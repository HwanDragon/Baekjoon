#include <iostream>
#include <queue>

#define INF 1000000000
#define NODE_COUNT 2001

using namespace std;

// dp[i][j] : i개의 이모티콘 개수일 때, j개의 이모티콘이 클립보드에 있을 떄 도달 할 수 잇는 시간의 최소값 저장
int dp[NODE_COUNT][NODE_COUNT] = { 0, };	// bool 타입의 visited 배열을 사용해도됨
int n;

int main()
{
	// 초기화
	for (int i = 0; i < NODE_COUNT; i++)
		for (int j = 0; j < NODE_COUNT; j++)
			dp[i][j] = INF;
	
	// 사용자 입력 받음
	cin >> n;

	// BFS 수행
	queue<pair<int, int>> q;
	q.push({ 1, 0 });
	dp[1][0] = 0;

	while (q.empty() == false)
	{
		pair<int, int> p = q.front();
		q.pop();
		int emoCnt = p.first;
		int clipCnt = p.second;

		// 이모티콘 복사(비용 1)
		if (dp[emoCnt][emoCnt] > dp[emoCnt][clipCnt] + 1)
		{
			dp[emoCnt][emoCnt] = dp[emoCnt][clipCnt] + 1;	// 더 적은 비용으로 갱신
			q.push({ emoCnt , emoCnt });
		}
		
		// 이모티콘 붙여넣기(비용 1)
		if (emoCnt + clipCnt < n * 2 && dp[emoCnt + clipCnt][clipCnt] > dp[emoCnt][clipCnt] + 1)
		{
			dp[emoCnt + clipCnt][clipCnt] = dp[emoCnt][clipCnt] + 1;
			q.push({ emoCnt + clipCnt , clipCnt });
			if (emoCnt + clipCnt == n) break;	// 도착점에 가장 먼저 도달한 경우가 최단경로임(가중치가 1로 같기 떄문)
		}
		
		// 이모티콘 하나 삭제(비용 1)
		if (((emoCnt - 1) > 0) && (dp[emoCnt - 1][clipCnt] > dp[emoCnt][clipCnt] + 1))
		{
			dp[emoCnt - 1][clipCnt] = dp[emoCnt][clipCnt] + 1;
			q.push({ emoCnt - 1 , clipCnt});
			if (emoCnt - 1 == n) break;	// 도착점에 가장 먼저 도달한 경우가 최단경로임(가중치가 1로 같기 떄문)
		}
	}

	// 결과 출력
	int minValue = INF;
	for (int i = 1; i <= n; i++)
	{
		minValue = min(minValue, dp[n][i]);
	}
	cout << minValue;
	return 0;
}