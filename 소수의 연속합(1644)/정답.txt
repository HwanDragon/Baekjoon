#include <iostream>
#include <algorithm>
#include <cmath>

#define CNT 4000001

using namespace std;

bool isPrime[CNT];	// 소수 미리 계산

// 에라토스테네스의 체를 이용하여 소수를 미리 계산해둠
void initPrimeNumber()
{
	fill(isPrime, isPrime + CNT, true);
	isPrime[1] = false;

	for (int i = 2; i <= sqrt(CNT); i++)
	{
		if (isPrime[i] == false) continue;	// 이미 소수가 아님

		int j = i * 2;
		while (j < CNT)
		{
			isPrime[j] = false;
			j += i;
		}
	}
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	initPrimeNumber();	// 소수 미리 계산

	int n;
	cin >> n;

	/*
	투포인터 기법을 이용하여 소수의 시작점부터 끝까지(n까지) 더해나가면서 
	소수의 합이 n이 되었을 경우 cnt를 증가시킴
	*/
	int cnt = 0, end = 2, sum = 0;
	for (int start = 2; start <= n; start++)
	{
		// sum이 n보다 작고, end가 끝에 도달하지 않았다면 
		while (sum < n && end <= n)
		{
			if (isPrime[end] == true)
				sum += end;
			end++;
		}
		
		if (sum == n) cnt++;	// sum이 n과 같을 경우

		if (isPrime[start] == true)	// start가 소수일경우 sum 에서 값을 빼줌
			sum -= start;

		// start + 1이 소수가 될때까지 start를 계속해서 증가시켜줌(다음 소수까지 값을 증가시킴)
		while (start < n && isPrime[start + 1] == false) start++;
	}
	cout << cnt;
	return 0;
}