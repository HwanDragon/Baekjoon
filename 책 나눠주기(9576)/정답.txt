#include <iostream>
#include <vector>

#define NODE_COUNT 1001

/*
L그룹을 서강대생, R그룹을 책 모델링하여 이분매칭 수행
*/

using namespace std;

int n, m;
vector<int> edges[NODE_COUNT];	// 서강대생이 받기를 원하는 책의 번호
bool visited[NODE_COUNT] = { 0, };
int prevNode[NODE_COUNT] = { 0, };

// 이분매칭 알고리즘 수행
bool dfs(int node)
{
	if (visited[node] == true) return false;

	visited[node] = true;
	for (int i = 0; i < edges[node].size(); i++)
	{
		int next = edges[node].at(i);
		if (prevNode[next] == -1 || dfs(prevNode[next]))
		{
			prevNode[next] = node;
			return true;
		}
	}

	return false;
}

// 초기화
void init()
{
	fill(prevNode, prevNode + NODE_COUNT, -1);
	for (int i = 0; i < NODE_COUNT; i++)
	{
		edges[i].clear();
	}
}

int main()
{
	int testCase;
	cin >> testCase;
	while (testCase--)
	{
		// 초기화
		init();

		// 사용자 입력 받음
		cin >> n >> m;
		int first, second;
		for (int i = 1; i <= m; i++)
		{
			cin >> first >> second;
			for (int j = first; j <= second; j++)	// i번째 서강대생이 받을수 있는 책 first~second까지 연결
				edges[i].push_back(j);
		}

		// 이분매칭 알고리즘 수행
		int cnt = 0;
		for (int i = 1; i <= m; i++)
		{
			fill(visited, visited + NODE_COUNT, false);
			if (dfs(i) == true) cnt++;
		}
		cout << cnt << "\n";
	}
	return 0;
}