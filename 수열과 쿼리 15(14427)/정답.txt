#include <iostream>

#define CNT 100001
#define SEG_CNT 100001*4

using namespace std;

int n, m;	// 수열의 크기, 쿼리 수
int arr[CNT] = { 0, };	// 수열 저장
int segTree[SEG_CNT] = { 0, };	// 세그먼트 트리

// 세그먼트 트리 초기화
int init(int start, int end, int node)
{
	if (start == end) return segTree[node] = start;

	int mid = (start + end) / 2;
	int leftIndex = init(start, mid, node * 2);
	int rightIndex = init(mid + 1, end, node * 2 + 1);

	if (arr[leftIndex] > arr[rightIndex])
		return segTree[node] = rightIndex;
	else
		return segTree[node] = leftIndex;
}

// index 위치 값 갱신
void update(int start, int end, int index, int node)
{
	// 구간에 포함되지 않을경우
	if (index < start || end < index) return;

	// 구간에 포함될 경우
	if (start == index && end == index)
	{
		segTree[node] = start;
		return;
	}

	// 구간에 걸쳐있는 경우
	int mid = (start + end) / 2;
	update(start, mid, index, node * 2);
	update(mid + 1, end, index, node * 2 + 1);
	
	int leftIndex = segTree[node * 2];
	int rightIndex = segTree[node * 2 + 1];
	if (arr[leftIndex] > arr[rightIndex])
		segTree[node] = rightIndex;
	else
		segTree[node] = leftIndex;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 수열 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 초기화
	init(1, n, 1);

	// 쿼리 질의
	int queryType, a, b;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> queryType;
		if (queryType == 1)
		{
			// change a index value to b
			cin >> a >> b;
			arr[a] = b;
			update(1, n, a, 1);
		}
		else
		{
			cout << segTree[1] << "\n";	// 가장 작은 인덱스 출력
		}
	}
	
	return 0;
}