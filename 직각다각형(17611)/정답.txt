#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n;
vector<pair<int, int>> verticals;	// 가로선(수직선) 저장 <시작점, 종료점>
vector<pair<int, int>> horizons;	// 세로선(수평선) 저장 <시작점, 종료점>
vector<pair<int, int>> lines;	// 선분 전체 저장 <시작점, 종료점>

// 선분을 시작점을 기준으로 오름차순 정렬
bool cmp(pair<int, int> &f, pair<int, int> &s)
{
	return f.first < s.first;
}

// 수직선, 수평선 생성
void init()
{
	for (int i = 0; i < lines.size(); i++)
	{
		pair<int, int> prev = lines.at(i == 0 ? lines.size() - 1 : i - 1);	// i 가 0일때는 lines의 마지막 원소 가져옴
		pair<int, int> cur = lines.at(i);
		if (prev.first == cur.first)	// 수평선
			horizons.push_back({ min(cur.second, prev.second), max(cur.second, prev.second) });	// 수평선
		else
			verticals.push_back({ min(cur.first, prev.first), max(cur.first, prev.first)});	// 수직선
	}
}

/*
스위핑 기법을 통해 가장 많이 겹치는 선분의 개수 탐색
선분의 시작점을 지날때는 +1
선분을 빠져나올때는 -1 하여 
가장 많이 겹쳐있는 선분의 개수를 셈
*/
int search(vector<pair<int, int>> &ls)
{
	int result = 0;
	priority_queue<int, vector<int>, greater<>> pq;	// 최소힙 기반의 우선순위 큐 생성
	int start = -500001, end = -500001;
	for (int i = 0; i < ls.size(); i++)
	{
		pair<int, int> p = ls.at(i);
		int lineStart = p.first;	// 선분의 시작점
		int lineEnd = p.second;	// 선분의 끝점

		// 우선순위큐가 비어있지 않고, 우선순위큐의 끝점이 새로 꺼낸 선분의 시작점보다 작거나 같을경우
		// 겹치지 않는 선분이므로 pop 해준다
		while (pq.empty() == false && pq.top() <= lineStart) pq.pop();

		pq.push(lineEnd);
		result = max(result, (int)pq.size());
	}
	return result;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n;
	int x, y;
	for (int i = 0; i < n; i++)
	{
		cin >> x >> y;
		lines.push_back({x, y});
	}

	init();	// 수직선, 수평선 생성
	sort(horizons.begin(), horizons.end(), cmp);	// 시작점을 기준으로 오름차순 정렬
	sort(verticals.begin(), verticals.end(), cmp);	// 시작점을 기준으로 오름차순 정렬

	int f = search(horizons);
	int s = search(verticals);
	cout << max(search(horizons), search(verticals));	// 수직선, 수평선중 가장 많이 겹치는 개수 출력
	return 0;
}