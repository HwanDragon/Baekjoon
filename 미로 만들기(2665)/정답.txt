#include <iostream>
#include <vector>
#include <queue>

/*
해당문제는 시작점으로부터 도착점까지 얼마만큼의 벽을 뚫어서 도달할 수 있는지를 출력하는문제이다.
문제 접근은, 벽을 뚫는데 비용이 1이 들고, 벽이 아닌곳은 비용이 0 이므로
입력받은 map 정보로부터 이동할 수 있는 좌표(위, 아래, 왼쪽 오른쪽)를 탐색해가며
도착점까지 드는 최소 비용을 계산하면 됨
*/

#define CNT 51
#define INF 1000000000

using namespace std;

int n;
char map[CNT][CNT];	// 맵 정보 저장
int dists[CNT][CNT];	// 최단거리 정보 저장
int dx[4] = { 0, 0, 1, -1 };	// 이동할 수 있는 x좌표
int dy[4] = { 1, -1, 0, 0};	// 이동할 수 있는 y좌표

// 우선순위 큐 기준 설정(최소힙)
struct cmp {
	bool operator()(pair<pair<int, int>, int> &f, pair<pair<int, int>, int> &s) {
		return f.second > s.second;
	}
};

// 다익스트라 알고리즘 수행
void dijkstra(int startX, int startY)
{
	priority_queue<pair<pair<int, int>, int>, vector<pair<pair<int, int>, int>>, cmp> pq;
	dists[startY][startX] = 0;	// 시작점은 비용 0으로 설정
	pq.push({ {startX, startY}, 0 });

	while (pq.empty() == false)
	{
		pair<int, int> coor = pq.top().first;
		int curX = coor.first;	// 현재 x좌표
		int curY = coor.second;	// 현재 y좌표
		int cost = pq.top().second;	// 현재 x,y 좌표까지 오는데 드는 비용
		pq.pop();

		if (dists[curY][curX] < cost) continue;	// 최단거리가 아님

		for (int i = 0; i < 4; i++)
		{
			int nextX = curX + dx[i];	// 이동 할 수 있는 x 좌표
			int nextY = curY + dy[i];	// 이동 할 수 있는 y 좌표
			if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= n) continue;	// 배열 범위 초과

			int cost = 0;	// 벽이 아닐경우 소모되는 비용
			if (map[nextY][nextX] == '0')	// 벽일경우 비용을 1로 설정
				cost = 1;

			if (dists[nextY][nextX] > dists[curY][curX] + cost)
			{
				dists[nextY][nextX] = dists[curY][curX] + cost;	// 최단거리 갱신
				pq.push({ {nextX, nextY} , dists[nextY][nextX] });
			}
		}
	}
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// dists 배열 초기화
	for (int y = 0; y < CNT; y++)
		for (int x = 0; x < CNT; x++)
			dists[y][x] = INF;

	// 사용자 입력 받음
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> map[i];

	// 다익스트라 알고리즘 수행
	dijkstra(0, 0);

	// 결과 출력
	cout << dists[n - 1][n - 1];

	return 0;
}