#include <iostream>

#define NODE_COUNT 100001

using namespace std;

int n, q;
int nums[NODE_COUNT] = { 0, };
long long segTree[NODE_COUNT * 4] = { 0, };

long long init(int start, int end, int node)
{
	if (start == end) return segTree[node] = nums[start];

	int mid = (start + end) / 2;
	return segTree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);
}

long long sum(int start, int end, int left, int right, int node)
{
	// 구간에 포함되지 않을 경우
	if (end < left || right < start) return 0;

	// 구간에 완전히 포함되는 경우
	if (start >= left && end <= right) return segTree[node];

	int mid = (start + end) / 2;
	return sum(start, mid, left, right, node * 2) + sum(mid + 1, end, left, right, node * 2 + 1);
}

long long update(int start, int end, int index, int node)
{
	// 구간에 포함되지 않는 경우
	if (end < index || start > index) return segTree[node];

	// 최하위 노드일 경우
	if (start == end) return segTree[node] = nums[index];

	// 구간에 포함되는 경우
	int mid = (start + end) / 2;

	return segTree[node] = update(start, mid, index, node * 2) + update(mid + 1, end, index, node * 2 + 1);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> q;
	for (int i = 1; i <= n; i++)
		cin >> nums[i];

	init(1, n, 1);
	// 쿼리 입력
	int first, second, third, forth;
	for (int i = 0; i < q; i++)
	{
		cin >> first >> second >> third >> forth;
		if (first < second)
			cout << sum(1, n, first, second, 1) << "\n";
		else
			cout << sum(1, n, second, first, 1) << "\n";

		nums[third] = forth;
		update(1, n, third, 1);
	}

	return 0;
}