#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

bool isGroup(string word) 
{
	vector<char> group;
	vector<char>::iterator iter;
	bool result = true;
	// 입력 단어의 첫번째 문자를 저장
	group.push_back(word[0]);

	// word[0]은 이미 저장했으니 1부터 탐색
	for (int i = 1; i < word.size(); i++) 
	{
		// word[i] == word[i-1] 이라면 그룹단어에 해당하므로 계속 진행하고(이전 단어와 현재 단어가 같음)
		// word[i] != word[i-1] 일 경우에는 새로운 단어가 추가된 경우이므로 확인 필요
		if (word[i] != word[i - 1]) 
		{
			// 새로운 단어가 단어그룹을 저장한 group vector 변수에 없으면 추가, 있을경우 단어그룹에 위배됨
			if (find(group.begin(), group.end(), word[i]) != group.end()) 
			{
				result = false;	// 위배되는 경우
				break;
			}
			else 
			{
				group.push_back(word[i]);	// 기존에 없던 새로운 단어 추가
			}
		}
	}
	return result;
}
int main(void) 
{
	int num, count = 0;
	string word;
	// 사용자로부터 입력받을 단어의 개수
	cin >> num;

	for (int i = 0; i < num; i++) 
	{
		cin >> word;
		if (isGroup(word) == true)
			count++;
	}
	cout << count;
	return 0;
}