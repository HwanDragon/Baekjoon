#include <iostream>
#include <queue>
#include <vector>

#define NODE_COUNT 201
#define INF 1000000000

using namespace std;

int n, m;	 // 체크포인트 수, 길의 수
vector<int> edges[NODE_COUNT];	// 간선 정보
int capacity[NODE_COUNT][NODE_COUNT] = { 0, };	// 용량 정보
int flow[NODE_COUNT][NODE_COUNT] = { 0, };	// 유량 정보
int prevNode[NODE_COUNT] = { 0, };	// 이전 노드 저장

// 초기화
void init()
{
	for (int i = 0; i < NODE_COUNT; i++)
	{
		edges[i].clear();
		for (int j = 0; j < NODE_COUNT; j++)
		{
			capacity[i][j] = 0;
			flow[i][j] = 0;
		}
	}
	
}

// 에드몬드 카프 알고리즘 수행
int maxFlow(int start, int end)
{
	int result = 0;
	while (true)
	{
		fill(prevNode, prevNode + NODE_COUNT, -1);	// 초기화
		queue<int> q;
		q.push(start);	// 큐에 시작노드 추가
		// 시작노드에서 end 노드까지 경로를 하나 찾음
		while (q.empty() == false && prevNode[end] == -1)
		{
			int cur = q.front();
			q.pop();
			for (int i = 0; i < edges[cur].size(); i++)
			{
				int next = edges[cur].at(i);

				if ((prevNode[next] == -1) && (capacity[cur][next] - flow[cur][next] > 0))
				{
					q.push(next);
					prevNode[next] = cur;
					if (next == end) break;
				}
			}
		}

		// end노드까지 도착할 수있는 경로가 없음
		if (prevNode[end] == -1) break;

		// 찾은 경로중 가장 작은 잔여용량을 찾음
		int minFlow = INF;
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			minFlow = min(minFlow, capacity[prev][i] - flow[prev][i]);
		}

		// 흘릴 수 있는 잔여용량을 해당 경로에 적용
		for (int i = end; i != start; i = prevNode[i])
		{
			int prev = prevNode[i];
			flow[prev][i] += minFlow;
			flow[i][prev] -= minFlow;	// 음의 간선 처리
		}
		result += minFlow;
	}
	return result;
}

int main()
{
	int t;
	cin >> t;
	while (t--)
	{
		// 초기화
		init();

		// 사용자 입력 받음
		cin >> n >> m;
		int first, second;
		for (int i = 0; i < m; i++)
		{
			cin >> first >> second;
			edges[first].push_back(second);
			edges[second].push_back(first);

			// 문제에서 1, n번 체크포인트는 최대 한마리의 개미만 길을 이용할 수 있다고 되어있으니 1, n일경우 용량을 1로 설정
			/*
			*   문제 조건
				1. x<y일 경우 체크포인트 x의 고도는 체크포인트 y의 고도보다 높다.
				2. 길은 항상 높은 고도의 체크포인트에서 낮은 고도의 체크포인트로 이어져 있다.
				3. 개미는 높이가 낮은 체크포인트에서 높이가 높은 체크포인트로 이동하지 못한다.
			*/
			// 위의 조건을 보면 역방향으로 이동이 불가능 하다는 것을 알 수있음.
			// 즉. 용량을 한 방향으로만 추가해야함
			if (first == 1 || second == n)
			{
				capacity[first][second] = 1;
			}
			else
			{
				// 개미의 최대 수 : 1000마리
				capacity[first][second] = 1000;
			}
		}

		// 에드몬드 카프 알고리즘 수행
		cout << maxFlow(1, n) << "\n";
	}
	return 0;
}