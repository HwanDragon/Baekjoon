#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

// 가능한 연산은 세가지다
// 1. 2로 나누기
// 2. 3으로 나누기
// 3. 1 빼기
// 
// n = 1일때부터 계산해나간다
//---------------------------------------------------------------------------
// 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20
//---------------------------------------------------------------------------
// 0  1  1  2  3  2  3  3  2   3   4   3   4   4   4   4   5   3   4   4
//---------------------------------------------------------------------------
//
// 1) n = 1 일경우는 별도 연산이 필요하지 않으므로 0
// 2) n = 2 일 경우 2로 나누어 주면 1 출력
// 3) n = 3 일 경우 3으로 나누어 주면 1 출력
// 4) n = 4 일 경우 2로 나누는 연산을 한번하면 2가 나오는데, 2에서 1로 가는 연산이 1이므로 2가 출력
// 5) n = 5 일 경우 1을 뺴면 4가 나오는데 4에서 1로 가기위한 최소연산회수는 2이므로 1 + 2 = 3 출력
// 6) n = 6 일 경우 3으로 나누면 2가 나오는데 2에서 1로 가기위한 최소연산회수는 1이므로 1 + 1 = 2 출력
// 7) n = 7 일 경우 1을 빼서 6으로 가면 6에서 1로 가기위한 최소값이 2이므로 1 + 2 = 3출력
//
//---------------------------------------------------------------------------
//
// 위의 내용을 정리하면 다음과같다
// 1. f(n) = f(n/3) + 1  (3으로 나누어주는 연산회수 1 추가)
// 2. f(n) = f(n/2) + 1  (2로 나누어주는 연산회수 1 추가)
// 3. f(n) = f(n - 1) + 1 (1 빼는 연산회수 1 추가)
// 
// 위의 3가지 f(n) 중에서 가장 작은 값을 택하면 된다



long dp[1000001] = { 0, };
int main()
{
    int n;
    cin >> n;
    dp[1] = 0;
    dp[2] = 1;
    dp[3] = 1;
    dp[4] = 2;

    for (int index = 2; index <= n; index++) 
    {
        dp[index] = dp[index - 1] + 1;
        if (index % 2 == 0) 
        {
            dp[index] = min(dp[index], (dp[index / 2] + 1));
        }

        if (index % 3 == 0) 
        {
            dp[index] = min(dp[index], (dp[index / 3] + 1));
        }
    }
    std::cout << dp[n];
    return 0;
}