#include <iostream>
#include <vector>
#include <queue>

#define INF 2000000000

using namespace std;

int n, m;
vector<pair<int, int>> edges[1001];
int dists[1001] = { 0, };
int visited[1001] = { 0, };

struct cmp {
	bool operator()(pair<int, int>& f, pair<int, int>& s) {
		return f.second > s.second;
	}
};

void dijkstra(int startNode)
{
	priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;	// {노드, 노드까지 비용}
	dists[startNode] = 0;
	pq.push({ startNode, 0 });

	while (pq.empty() == false)
	{
		pair<int, int> p = pq.top();
		pq.pop();
		int currentNode = p.first;
		int currentToDist = p.second;

		if (visited[currentNode] == true) continue;
		if (dists[currentNode] < currentToDist)	 continue;	// 최단거리가아님

		visited[currentNode] = true;

		for (int i = 0; i < edges[currentNode].size(); i++)
		{
			pair<int, int> np = edges[currentNode].at(i);
			int nextNode = np.first;
			int nextToDist = np.second;

			if (visited[nextNode] == true)	continue;

			if (dists[nextNode] > nextToDist + currentToDist)
			{
				dists[nextNode] = nextToDist + currentToDist;
				pq.push({ nextNode, nextToDist + currentToDist });
			}
		}
	}
}


int main()
{
	for (int i = 0; i < 1001; i++) dists[i] = INF;
	int f, s, w;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> f >> s >> w;
		edges[f].push_back({ s, w });
	}

	int startNode, endNode;
	cin >> startNode >> endNode;
	dijkstra(startNode);
	cout << dists[endNode];

	return 0;
}