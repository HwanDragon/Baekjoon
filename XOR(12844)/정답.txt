#include <iostream>

/*
수열의 시작이 0부터 시작하니 조심해야함
*/

#define CNT 500001	// 수열의 개수
#define SEG_CNT 500001*4	// 세그먼트 트리 개수

using namespace std;

typedef unsigned int ui;

int n, m;	// 수열의 크기, 쿼리의 개수
ui arr[CNT] = { 0, };	//	수열 저장
ui segTree[SEG_CNT] = { 0, };	// 세그먼트 트리
ui lazy[SEG_CNT] = { 0, };	// lazy prpagation
 
// 세그먼트 트리 초기화
ui init(int start, int end, int node)
{
	if (start == end) return segTree[node] = arr[start];
	int mid = (start + end) / 2;
	return segTree[node] = init(start, mid, node * 2) ^ init(mid + 1, end, node * 2 + 1);
}

// Lazy propagation 적용
void updateLazyPropagation(int start, int end, int node)
{
	if (lazy[node] == 0) return;	// 적용할 값이 없음

	if ((end - start + 1) % 2 == 1)	// n에 k를 짝수번 xor 하면 결국 n이 됨(따라서 홀수일때만 한번 적용)
		segTree[node] ^= lazy[node];

	if (start != end)
	{
		lazy[node * 2] ^= lazy[node];
		lazy[node * 2 + 1] ^= lazy[node];
	}
	lazy[node] = 0;
}

void update(int start, int end, int left, int right, int node, ui value)
{
	updateLazyPropagation(start, end, node);	// lazy propagation 적용

	// 구간이 겹치지 않는경우
	if (end < left || right < start) return;

	// 구간이 완전히 겹치는 경우
	if (left <= start && end <= right)
	{
		lazy[node] = value;
		updateLazyPropagation(start, end, node);
		return;
	}

	// 구간이 걸쳐있는 경우
	int mid = (start + end) / 2;
	update(start, mid, left, right, node * 2, value);
	update(mid + 1, end, left, right, node * 2 + 1, value);
	segTree[node] = segTree[node * 2] ^ segTree[node * 2 + 1];	// 구간 세그먼트 트리 갱신
}

ui getXorValue(int start, int end, int left, int right, int node)
{
	updateLazyPropagation(start, end, node);	// lazy propagation 적용

	// 구간이 겹치지 않는경우
	if (end < left || right < start) return 0;

	// 구간이 완전히 겹치는 경우
	if (left <= start && end <= right) return segTree[node];
	
	// 구간이 걸쳐있는 경우
	int mid = (start + end) / 2;
	return getXorValue(start, mid, left, right, node * 2) ^ getXorValue(mid + 1, end, left, right, node * 2 + 1);
}

int main()
{
	// 입출력 속도 증가
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 초기화
	init(1, n, 1);

	// 쿼리 질의
	int queryType, a, b, c;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> queryType;
		if (queryType == 1)
		{
			// [a, b] xor c
			cin >> a >> b >> c;
			update(1, n, a + 1, b + 1, 1, c);
		}
		else
		{
			// show [a, b] all xor
			cin >> a >> b;
			cout << getXorValue(1, n, a + 1, b + 1, 1) << "\n";
		}
	}

	return 0;
}