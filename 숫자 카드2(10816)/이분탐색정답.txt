#include <iostream>
#include <algorithm>

using namespace std;

int nums[500000];

// nums 배열에서 key값이 시작되거나, 더 작은값이 나오는 위치 반환
int lowerBound(int size, int key)
{
	int start = 0;
	int end = size;
	int mid;
	while (start < end)
	{
		mid = (start + end) / 2;
		if (nums[mid] < key)
			start = mid + 1;
		else if (nums[mid] > key)
			end = mid;
		else if (nums[mid] == key)
			end = mid;
	}
	return end;
}

// nums 배열에서 key값이 끝나거나, 더큰값이 나오는 위치 반환
int upperBound(int size, int key)
{
	int start = 0;
	int end = size;
	int mid;
	while (start < end)
	{
		mid = (start + end) / 2;
		if (nums[mid] < key)
			start = mid + 1;
		else if (nums[mid] > key)
			end = mid;
		else if (nums[mid] == key)
			start = mid + 1;
	}
	return end;
}

// key값의 위치를 확인하여 개수 반환
int counting(int size, int key)
{
	int n1 = upperBound(size, key);
	int n2 = lowerBound(size, key);
	return n1 - n2;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	int n, m, key;
	cin >> n;
	for (int i = 0 ; i < n; i++)
		cin >> nums[i];
	
	sort(nums, nums + n);	// 이분탐색을 위해 정렬

	cin >> m;
	for (int i = 0 ; i < m; i++)
	{
		cin >> key;
		cout << counting(n, key) << " ";
	}

	return 0;
}