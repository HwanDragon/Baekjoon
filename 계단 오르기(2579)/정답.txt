#include <iostream>

/*
해당 문제는 n번째 계단에 도달했을 때
한번의 점프로 도착했는지, 두번의 점프로 도착했는지에 대한 판단이 필요하다
즉, 점프 상태와 최대 비용을 저장해야하므로, 이차원 dp 배열을 만들어 값을 갱신시켜 나가야함
또한 연속된 세개의 계단을 오를 수 없으므로, 점화식을 만들 때, 이를 반영해야함

점화식을 생각해 보면
dp[n][1] -> n번째 계단에 1칸의 점프로 오른경우
dp[n][2] -> n번째 계단에 2칸의 점프로 오른경우
라고 할 수 있고,

점화식은 아래와 같다

dp[n][1] = dp[n - 1][2] + cost[n]	(n-1 계단에서 1칸의 점프로 오른 경우 dp[n-1][1]은 연속된 세개의 계단을 오르는 것이므로 안됨)
dp[n][2] = max(dp[n - 2][1], dp[n - 2][2]) + cost[n]	(n-2 계단에서 2칸의 점프로 오를경우 n-2번째까지 한번의 점프로왔든 두번의점프로왓든 상관이없음)

*/

using namespace std;

typedef long long ll;

int n;
ll cost[301];
/*
dp[i][0] : 안씀, 
dp[i][1] : 현재 i번쨰까지 1번의 점프로 도달했을 경우
dp[i][2] : 현재 i번쨰까지 2번의 점프로 도달했을 경우
*/
ll dp[301][3];	

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> cost[i];

	// 1번쨰 계단까지 점프로 도달할 수 있는 비용
	dp[1][1] = cost[1];
	dp[1][2] = 0;

	// 2번째 계단까지 점프로 도달할 수 있는 비용
	dp[2][1] = cost[1] + cost[2];	// 시작점은 계단에 포함되지 않음(주의)
	dp[2][2] = cost[2];

	// 점화식을 이용하여 값을 미리 갱신해나감
	for (int i = 3; i <= 300; i++)
	{
		dp[i][1] = dp[i - 1][2] + cost[i];
		dp[i][2] = max(dp[i - 2][1], dp[i - 2][2]) + cost[i];
	}

	// n번째 계단에 오를때 얻을 수 있는 최대값 출력
	cout << max(dp[n][1], dp[n][2]);

	return 0;
}