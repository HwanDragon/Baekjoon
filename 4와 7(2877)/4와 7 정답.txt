#include<iostream>
#include<algorithm>
#include<cmath>
#include<stack>
using namespace std;

// 2^10 == 1024, 10^9 -> 2^30보다 작음 (num에 2의 배수들을 미리 계산해둠)
int num[31] = { 0, };

/*
	4		0
	7		1
	44		00
	47		01
	74		10
	77		11
	444		000
	447		001
	474		010
	477		011
	744		100
	747		101
	774		110
	777		111
	4444	0000

	//////////////////////////////////////

	위를 보면 이진수를 쭉 나열해 놓은 것과 같다는 것을 알 수 있음( 4 -> 0, 7 -> 1)
	그렇다면 문제에서 원하는 수를 출력하기 위해 일단 자리수를 계산해야함
	
	자리수계산은 1자리인경우 2개 , 2자리인경우 4개, 4자리인경우 8개, 8자리인경우 16개...
	즉, 2배씩 늘어난다는것을 알 수 있음.
	만약 10번째 숫자의 자리수는 10 - 2 - 4 - 8 을 계산해보면 0보다 작아지므로 3자리인것을 알 수있음

	숫자는 10 - 2 - 4 를 한 뒤, 위의 이진수는 0부터 시작하므로 1을 더 뺀 수가 
	우리가 찾는 이진수가 됨(0 -> 4, 1 -> 7로 출력).

	우리가 찾은 이진수를 2로 나누었을 때 나머지가 1이면 낮은 자리가 7, 0이면 낮은 자리가 4이므로
	스택에 '4' or '7'을 미리 넣어두었다가 출력해두면 높은 자리 수 먼저 출력되어 우리가 원하는 정답이 출력됨

*/

int main()
{
	// 미리 2의 배수를 계산해둠
	num[1] = 2;
	for (int i = 2; i <= 30; i++) {
		num[i] = num[i - 1] * 2;
	}

	// 사용자 입력 받음
	int k;
	cin >> k;

	
	// 자리수와 우리가 원하는 이진수 계산
	int numLenngth = 1;
	int r = k;
	for (int i = 1; i <= 30; i++) {
		r = r - num[i];	 // 처음으로 0보다 작거나 같아지는 구간이 자리수를 나타냄
		if (r <= 0 == true)
		{
			r += num[i]; //해당 자리수의 첫번째부터 부터 몇번째 시작하는지 계산하기위해 다시 더해줌
			numLenngth = i;	// 자리수는 i
			break;
		}
	}

	r = r - 1;	// 우리가 원하는 이진수는 1이 아니라 0부터 시작하므로 1 빼줌
	stack<char> s;
	for (int i = 0; i < numLenngth; i++)
	{
		int tr = r % 2;	// 2로 나누었을 때 나머지
		if (tr == 0)
		{
			s.push('4');
		}
		else if (tr == 1)
		{
			s.push('7');
		}
		r = r / 2;
	}

	int size = s.size();
	for (int i = 0; i < size; i++) {
		cout << s.top();
		s.pop();
	}

	return 0;
}