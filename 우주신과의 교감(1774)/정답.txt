#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

// Union Find 알고리즘
int getParent(int node, int parent[])
{
	if (node == parent[node]) return node;

	return parent[node] = getParent(parent[node], parent);
}

void unionParent(int first, int second, int parent[])
{
	int firstParent = getParent(first, parent);
	int secondParent = getParent(second, parent);

	if (firstParent < secondParent)
		parent[secondParent] = firstParent;
	else
		parent[firstParent] = secondParent;
}

bool findParent(int first, int second, int parent[])
{
	if (getParent(first, parent) == getParent(second, parent))
		return true;

	return false;
}
// Union Find 알고리즘

int n, m;

vector<pair<long long, long long>> points;

class Edge {
public :
	long long firstIndex;
	long long secondIndex;
	double dist;
};

vector<Edge*> edges;

int compare(Edge *first, Edge *second)
{
	return first->dist < second->dist;
}

int main()
{
	int parent[1001] = { 0, };
	for (int i = 0; i < 1001; i++) parent[i] = i;

	// 포인트 정보 받기
	cin >> n >> m;
	int x, y;
	for (int i = 0; i < n; i++)
	{
		cin >> x >> y;
		points.push_back(make_pair(x, y));
	}

	// 연결된 노드를 입력받아 합치기
	int f, s;
	for (int i = 0; i < m; i++)
	{
		cin >> f >> s;
		unionParent(f, s, parent);
	}

	// 노드별 거리정보 계산
	for (int i = 0; i < n; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			pair<long long, long long> f = points.at(i);
			pair<long long, long long> s = points.at(j);

			Edge* edge = new Edge();
			edge->firstIndex = i + 1;
			edge->secondIndex = j + 1;

			if (findParent(edge->firstIndex, edge->secondIndex, parent) == true)
			{
				// 이미 연결된 노드는 거리 0 으로 계산
				edge->dist = 0;
			}
			else 
			{
				edge->dist = sqrt((f.first - s.first)* (f.first - s.first) + (f.second - s.second) * (f.second - s.second));
			}

			edges.push_back(edge);
		}
	}

	sort(edges.begin(), edges.end(), compare);

	double result = 0;
	for (int i = 0; i < edges.size(); i++)
	{
		Edge* edge = edges.at(i);
		// 이미 연결된 노드는 pass
		if (findParent(edge->firstIndex, edge->secondIndex, parent) == true)
			continue;

		unionParent(edge->firstIndex, edge->secondIndex, parent);
		result += edge->dist;
	}

	printf("%.2lf", result);
	return 0;
}