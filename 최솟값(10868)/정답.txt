#include <iostream>

#define INF 1000000000
#define NODE_COUNT 100001

using namespace std;

int n, m;
int arr[NODE_COUNT] = { 0, };
int segTree[NODE_COUNT * 4] = { 0, };

// 초기화
int init(int start, int end, int node)
{
	if (start == end) return segTree[node] = arr[start];

	int mid = (start + end) / 2;
	return segTree[node] = min(init(start, mid, node * 2), init(mid + 1, end, node * 2 + 1));
}

// left, right 범위에서 최소값을 찾아서 반환
int getMinValue(int start, int end, int left, int right, int node)
{
	// 구간 밖의 범위일 경우
	if (left > end || start > right) return INF;

	// 구간에 포함될 경우
	if (left <= start && end <= right) return segTree[node];

	int mid = (start + end) / 2;
	return min(getMinValue(start, mid, left, right, node * 2), getMinValue(mid + 1, end, left, right, node * 2 + 1));
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];
	
	// 초기화
	init(1, n, 1);

	// 구간 쿼리
	int first, second;
	for (int i = 0; i < m; i++)
	{
		cin >> first >> second;
		cout << getMinValue(1, n, first, second, 1) << "\n";
	}
	return 0;
}