#include <iostream>
#include <cmath>

#define CNT 100001
#define SQRT_CNT 1001
#define INF 1000000001

using namespace std;

int n, m, blockSize;
int arr[CNT] = { 0, };	// 수열 저장
int block[SQRT_CNT] = { 0, };	// 구간 블럭 저장

// block 초기화
void init()
{
	// 최소값을 찾는 것이므로 무한대로 값 초기화
	fill(block, block + SQRT_CNT, INF);

	blockSize = sqrt(n);	// 블럭 사이즈 초기화

	// 수열을 순회하며 구간에 해당하는 블럭값 갱신
	int blockIndex = -1;
	for (int i = 0; i < n; i++)
	{
		if (i % blockSize == 0)
			blockIndex++;
		block[blockIndex] = min(block[blockIndex], arr[i]);
	}
}

// [left, right] 구간중 최소값 반환
int query(int left, int right)
{
	int result = INF;

	// 블럭에 해당하지 않는 왼쪽구간의 최소값 계산
	while (left <= right && left % blockSize != 0)
	{
		result = min(result, arr[left]);
		left++;
	}

	// 블럭 구간에 해당하는 최소값 계산
	while (left + blockSize <= right)
	{
		result = min(result, block[left / blockSize]);
		left += blockSize;
	}

	// 블럭 구간에 해당하지않는 오른쪽 구간의 최소값 계산
	while (left <= right)
	{
		result = min(result, arr[left]);
		left++;
	}

	return result;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 수열 입력 받음
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> arr[i];

	// 구간 최소값을 저장하는 블럭 초기화
	init();

	// 쿼리 질의
	int a, b;
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		cout << query(a - 1, b - 1) << "\n";	// [a, b] 구간중 최소값 반환
	}
	
	return 0;
}