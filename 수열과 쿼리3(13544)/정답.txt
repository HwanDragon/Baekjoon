#include <iostream>
#include <vector>

#define CNT 100001
#define SEG_CNT 100001*4

using namespace std;

int arr[CNT] = { 0, };	// 수열 저장
vector<int> segTree[SEG_CNT];	// 세그먼트 트리 저장(머지 소트 트리(각각의 노드가 배열))

// 머지함수 선언
void merge(int node);

// 초기화
void init(int start, int end, int node)
{
	// 단일 원소일 경우
	if (start == end)
	{
		segTree[node].push_back(arr[start]);
		return;
	}

	// 구간에 걸쳐있는경우
	int mid = (start + end) / 2;	// 절반씩 분할
	init(start, mid, node * 2);	// 분할정복
	init(mid + 1, end, node * 2 + 1);	// 분할정복
	merge(node);	// 머지
}

void merge(int node)
{
	int lIndex = 0;	// 왼쪽 배열방을 탐색할 인덱스
	int rIndex = 0;	// 오른쪽 배열방을 탐색할 인덱스
	
	vector<int>& leftSegTree = segTree[node * 2];	// 왼쪽 배열방
	vector<int>& rightSegTree = segTree[node * 2 + 1];	// 오른쪽 배열방
	// 왼쪽, 오른쪽 배열방을 탐색하며 값이 더 작은 항목을 segTree[node]에 추가함
	while (lIndex < leftSegTree.size() && rIndex < rightSegTree.size())
	{
		if (leftSegTree.at(lIndex) > rightSegTree.at(rIndex))
			segTree[node].push_back(rightSegTree.at(rIndex++));
		else
			segTree[node].push_back(leftSegTree.at(lIndex++));
	}

	// 왼쪽 배열방에 항목이 남아있을 경우
	for (int i = lIndex; i < leftSegTree.size(); i++)
		segTree[node].push_back(leftSegTree.at(i));
	
	for (int i = rIndex; i < rightSegTree.size(); i++)
		segTree[node].push_back(rightSegTree.at(i));
}

int query(int start, int end, int left, int right, int node, int value)
{
	// 구간에 겹치지 않는경우
	if (end < left || right < start) return 0;

	// 구간에 완전히 겹치는 경우
	if (left <= start && end <= right)
	{
		int s = 0, e= segTree[node].size();
		while (s < e)
		{
			int m = (s + e) / 2;
			if (segTree[node].at(m) < value)
				s = m + 1;
			else if (segTree[node].at(m) > value)
				e = m;
			else
				s = m + 1;
		}
		return segTree[node].size() - e;
	}

	// 구간에 걸쳐있는 경우
	int mid = (start + end) / 2;
	return query(start, mid, left, right, node * 2, value) + query(mid + 1, end, left, right, node * 2 + 1, value);
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 수열 입력 받음
	int n, k;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];

	// 초기화
	init(1, n, 1);

	// 쿼리 질의
	int a, b, c, last_ans = 0;
	cin >> k;
	for (int i = 0; i < k; i++)
	{
		cin >> a >> b >> c;
		last_ans = query(1, n, a^last_ans, b^last_ans, 1, c^last_ans);
		cout << last_ans << "\n";
	}

	return 0;
}