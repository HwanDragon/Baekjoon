#include <iostream>

#define CNT 100001
#define SEG_CNT 100001 * 4
#define INF 1000000000

using namespace std;

int n, m;	// 수열 개수, 쿼리 개수
int arr[CNT] = { 0, };	// 수열 저장
int segTree[SEG_CNT] = { 0, };	// 세그먼트 트리

// 세그먼트 트리 초기화
int init(int start, int end, int node)
{
	if (start == end) return segTree[node] = start;	// 인덱스 저장

	// 분할 정복으로 값이 더 작은 인덱스를 segTree[node]에 저장
	int mid = (start + end) / 2;
	int leftIndex = init(start, mid, node * 2);
	int rightIndex = init(mid + 1, end, node * 2 + 1);
	if (arr[leftIndex] > arr[rightIndex])
		return segTree[node] = rightIndex;
	else
		return segTree[node] = leftIndex;
}

// 세그먼트 트리 갱신
void update(int start, int end, int index, int node, int value)
{
	// 구간에 포함되지 않는 경우
	if (end < index || index < start) return;

	// 구간에 완전히 포함되는 경우
	if (start == index && index == end)
	{
		segTree[node] = start;	// 해당 지점의 인덱스 갱신
		return;
	}

	// 구간에 걸쳐있는 경우
	// 분할정복으로 왼쪽 자식과 오른쪽 자식중 더 작은 인덱스값 저장
	int mid = (start + end) / 2;
	update(start, mid, index, node * 2, value);
	update(mid + 1, end, index, node * 2 + 1, value);
	int leftIndex = segTree[node * 2];
	int rightIndex = segTree[node * 2 + 1];
	if (arr[leftIndex] > arr[rightIndex])
		segTree[node] = rightIndex;
	else
		segTree[node] = leftIndex;
}

int getMinValue(int start, int end, int left, int right, int node)
{
	// 구간에 포함되지 않는 경우
	if (end < left || right < start) return INF;

	// 구간에 완전히 포함되는 경우
	if (left <= start && end <= right) return segTree[node];

	// 구간에 걸쳐있는 경우
	int mid = (start + end) / 2;
	int leftIndex = getMinValue(start, mid, left, right, node * 2);
	int rightIndex = getMinValue(mid + 1, end, left, right, node * 2 + 1);
	if (leftIndex == INF && rightIndex != INF) return rightIndex;
	if (leftIndex != INF && rightIndex == INF) return leftIndex;
	if (leftIndex == INF && rightIndex == INF) return INF;	// 있을 수 없는 경우

	// 더 작은 인덱스값 반환
	if (arr[leftIndex] > arr[rightIndex])
		return rightIndex;
	else
		return leftIndex;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	// 수열 입력 받음
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];
	
	// 초기화
	init(1, n, 1);

	// 쿼리 질의
	int queryType, a, b;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> queryType;
		if (queryType == 1)
		{
			// change a -> b;
			cin >> a >> b;
			arr[a] = b;
			update(1, n, a, 1, b);
		}
		else
		{
			// show [a, b] min index
			cin >> a >> b;
			cout << getMinValue(1, n, a, b, 1) << "\n";
		}
	}

	return 0;
}
