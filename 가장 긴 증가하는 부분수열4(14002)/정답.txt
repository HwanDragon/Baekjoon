#include <iostream>
#include <stack>

#define CNT 1001

using namespace std;

int n;
int arr[CNT] = { 0, };	// 수열 저장
int dp[CNT] = { 0, };	// 최장길이 부분수열 길이 저장

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	// 초기화
	fill(dp, dp + CNT, 1);	// 모든 수열의 최소 부분증가수열 길이가 1임(자기자신)

	// 사용자 입력 받음
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> arr[i];

	/*
	int i = 0...n-1
	int j = 0...i-1
	중첩반복문을 수행하면서 arr[i]가 arr[j]보다 더 크고, 
	dp[j] + 1이 dp[i]보다 더 클경우 더 긴 부분증가수열을 찾은경우에 해당함
	*/
	// dp 계산
	int maxLen = 1;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < i; j++)
		{
			if (arr[i] > arr[j] && dp[i] < dp[j] + 1)
			{
				dp[i] = dp[j] + 1;	
				maxLen = max(maxLen, dp[i]);	// 최대 길이 저장
			}	
		}
	}

	// dp배열을 역순으로 수행하며 최대 부분증가수열 탐색
	stack<int> st;
	for (int i = n - 1; i >= 0; i--)
	{
		if (dp[i] == maxLen)
		{
			maxLen--;	// 길이 1 감소
			st.push(arr[i]);	// 결과 저장
		}
	}

	// 결과 출력
	cout << st.size() << "\n";
	while (st.empty() == false)
	{
		cout << st.top() << " ";
		st.pop();
	}

	return 0;
}