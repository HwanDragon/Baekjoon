
// 문제 이해
// 1. 첫째줄에 전체 컴퓨터의 개수 N (N < 10,000 의 자연수), 총 신뢰 개수 M (M <= 100,000)를 입력받음
// 2. 신뢰의 경우 A B 형식으로 들어오며 "A가 B를 신뢰한다(B를 해킹하면 A를 해킹할 수 있음)"

// 백준 입력
//    ----
//    5 4
//    ----
// 1) 3 1
// 2) 3 2
// 3) 4 3
// 4) 5 3
//    ----

// 위의 경우를 살펴보면 전체 컴퓨터의 개수는 5개 이고, 신뢰 개수는 4개이다.
// 1) 의 경우 "3 1"이고, 즉, 1번 컴퓨터를 해킹하면 3번 컴퓨터도 해킹이 가능하다는 이야기이다
// 2) 의 경우 "3 2"이고, 즉, 2번 컴퓨터를 해킹하면 3번 컴퓨터도 해킹이 가능하다는 이야기이다
// 3) 의 경우 "4 3"이고, 즉, 3번 컴퓨터를 해킹하면 4번 컴퓨터도 해킹이 가능하다는 이야기이다
// 4) 의 경우 "5 3"이고, 즉, 3번 컴퓨터를 해킹하면 5번 컴퓨터도 해킹이 가능하다는 이야기이다
// 
// 위의 경우를 살펴보면 아래와 같은 방향성이 있는 그래프를 나타낸다는것을 알 수 있다.
// 
// 
//  5   <-  3  <-  1
//  4   <-     <-  2
//      
// (1번을 해킹하면 3번도 해킹이 가능하고, 3번을 해킹하면 4, 5번이 해킹이 가능함)
// (2번을 해킹하면 3번도 해킹이 가능하고, 3번을 해킹하면 4, 5번이 해킹이 가능함)
// (3번을 해킹하면 4,5번 해킹이 가능함)
// (4번을 해킹하면 4번만 해킹이 가능함)
// (5번을 해킹하면 5번만 해킹이 가능함)

// 즉 dfs를 이용하여 그래프를 탐색하고 노드들을 탐색할 때마다 해킹할 수 있는 컴퓨터 개수를 새면 됨

#include <iostream>
#include<algorithm>
#include<queue>
#include<vector>

#define NODE_COUNT 10001

using namespace std;

int n, m;
vector<int> edges[NODE_COUNT];	// 간선정보 저장
int hackingCnt[NODE_COUNT] = { 0 };	// 각 컴퓨터마다 해킹할 수 있는 컴퓨터 수
bool visited[NODE_COUNT] = { 0, };	// 방문여부 확인

int dfs(int node, int cnt)
{
	visited[node] = true;
	for (int i = 0; i < edges[node].size(); i++)
	{
		int next = edges[node].at(i);
		if (visited[next] == true) continue;	// 이미 방문한 노드는 pass
		cnt = dfs(next, cnt + 1);
	}
	return cnt;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	int first, second;
	for (int i = 0; i < m; i++)
	{
		cin >> first >> second;
		edges[second].push_back(first);
	}

	// dfs를 수행하여 각 컴퓨터마다 해킹할 수 있는 컴퓨터 수 저장
	int maxValue = 0;
	for (int i = 1; i <= n; i++)
	{
		fill(visited, visited + NODE_COUNT, false);	// visited 배열 초기화

		hackingCnt[i] = dfs(i, 1);	// 해킹 가능한 컴퓨터 수 반환
		if (maxValue < hackingCnt[i])	// 최대값 확인
			maxValue = hackingCnt[i];	// 최대값 저장
	}

	// 최대값과 같은 컴퓨터 출력
	for (int i = 1; i <= n; i++)
	{
		if (maxValue == hackingCnt[i])
			cout << i << " ";
	}

	return 0;
}