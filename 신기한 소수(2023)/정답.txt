#include <iostream>
#include <cmath>

/*
메모리 제한으로 에라토스테네스의 체 사용 불가능
문제에서 가장 높은 자리수부터 하나씩 늘려가며 소수가 아닐경우 높은자리수를 증가시킬 수 있으므로 백트래킹으로 풀이가능
예) 2XXXX -> 가장 높은 자리수인 2가 소수가 아니므로 20000~29999 까지 모두 탐색할 필요가 없이
바로 3XXXX로 뛰어넘기 가능
*/

using namespace std;

int minValue = 1, input;	//  최소 자리수, 사용자 입력받을 변수

// 소수인지 여부 반환
bool isPrimeNumber(int num)
{
	if (num == 1) return false;	// 1은 소수가 아님
	for (int i = 2; i <= sqrt(num); i++)	// num의 제곱근까지만 검사
	{
		if (num % i == 0) return false;	// 나누어 떨어지는 수가 있을경우 pass
	}
	return true;	// 소수가 맞음
}

// 백트래킹으로 소수 탐색
void search(int cur)
{
	if (isPrimeNumber(cur) == false)	// 소수가 아닐경우 더이상 탐색할 필요가 없음
		return;

	if (cur >= minValue)	// 해당 자리수의 최소 수보다 커질경우 출력하고 리턴
	{
		cout << cur << "\n";
		return;
	}

	for (int i = 1; i <= 9; i++)
		search(cur * 10 + i);		// 인자로받은 수에 10을 곱하고 i를 더해 탐색해나감	
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> input;
	for (int i = 0; i < input - 1; i++)
		minValue = minValue * 10;	// 최대 자리수 계산

	for (int i = 1; i <= 9; i++)	// 시작 자릭 1~9로 시작하는 수 전부 탐색
		search(i);
	
	return 0;
}