#include <iostream>

// 모든 간선이 불타는 시간은 긴 간선을 저장한 longDist로 계산
// 위에서 플로이드 와샬 수행 결과로 
// 1번 노드에 불을 붙였을때 i번째 노드에 불이 붙는 시간은 shortDist[1][i] 로 계산됨
// 
// 그리고 i, j번 노드에 불이 붙었을 떄 i와 j 사이의 간선이 타는 시간은 i노드에 불이 붙는 시간을 ti,
// j노드에 불이 붙는 시간을 tj라고 하고, 간선의 길이가 c라고 하면, 둘 사이의 간선이 모두 타는 시간은
// t = (tj - ti) + (c - (tj - ti)) / 2 
// 가 된다.
// ti에서 t2까지 간선이 1씩 불타므로 j노드에 불이 붙었을때는 tj - ti 만큼 간선이 타고, 
// 남은 간선의 길이는 c - (tj - ti) 가 된다.
// 그다음부터는 i, j 노드에 불이 붙었으므로 남은 간선은 2배로 타기 시작하여 총 걸리는 시간은 위와 같다.
// 그러면 해당 간선이 다 탔을때의 시간은 아래와 같다
// results[start][i] + t  (i번째 노드에 불이 붙은 시간 + 해당 간선이 타는데 걸리는 시간)
// 

// 그러면 모든 노드가 불이 붙는 시간을 구했고, 모든 간선이 불타는데 걸리는 시간을 구했으니
// 모든 노드를 돌며 모든 간선이 불타는데 걸리는 시간을 계산하면 된다.
// 불타는 시간을 계산할 때는 가장 긴 노드를 저장한 longDist 값을 이용하여 계산하면된다.

#define INF 1000000000

using namespace std;

int n, m;
int shortDist[201][201] = { 0, };	// 짧은 간선을 저장할 배열
int longDist[201][201] = { 0, };	// 가장 긴 간선을 저장할 배열
int results[201][201] = { 0, };	// 플로이드 와샬 수행 결과 저장 배열

void floydWarshall()
{
	// 초기화
	for (int i = 1; i<= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			results[i][j] = shortDist[i][j];
		}
	}

	// 자기자신 비용 0으로 초기화
	for (int i = 1; i <= n; i++) results[i][i] = 0;

	// 플로이드 와샬 수행
	for (int k = 1; k <= n; k++)
	{
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (results[i][j] > results[i][k] + results[k][j])
					results[i][j] = results[i][k] + results[k][j];
			}
		}
	}
}

int main()
{
	// 초기화
	for (int i = 0; i <= 200; i++)
	{
		for (int j = 0; j <= 200; j++)
		{
			shortDist[i][j] = INF;
			longDist[i][j] = INF;
		}
	}

	// 사용자 입력 받음
	cin >> n >> m;
	int first, second, weight;
	for (int i = 0; i < m; i++)
	{
		cin >> first >> second >> weight;
		shortDist[first][second] = min(shortDist[first][second], weight);	// 최소값 저장
		shortDist[second][first] = shortDist[first][second];

		// 긴 간선값 저장
		if (longDist[first][second] == INF)
		{
			longDist[first][second] = weight;
			longDist[second][first] = weight;
		}
		else
		{
			longDist[first][second] = max(longDist[first][second], weight);
			longDist[second][first] = longDist[first][second];
		}
	}

	// 각 노드에 언제 불이 붙는지 알아내기위해 짧은 간선으로 플로이드와샬 수행
	floydWarshall();


	double result = INF;
	// 모든 노드 탐색
	for (int start = 1; start <= n; start++)
	{
		double lastBurnEdgeTime = 0;	// 마지막까지 모든 엣지가 타는데 걸리는 시간
		// i번쨰 노드
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (longDist[i][j] == INF)	continue;	// 간선정보 없음
				int burnTime = results[start][j] - results[start][i];
				double time = burnTime + (double)(longDist[i][j] - burnTime) / 2;
				if (time <= 0) continue;
				time = time + results[start][i]; // 간선이 타는데 걸리는 시간 + i번째 노드에 불 붙는 시간

				lastBurnEdgeTime = max(lastBurnEdgeTime, time);	// 마지막까지 모든 엣지가 타는데 걸리는 시간
			}
		}

		// start 노드에서 
		result = min(result, lastBurnEdgeTime);	
	}
	cout << fixed;
	cout.precision(1);
	cout << result;

	return 0;
}