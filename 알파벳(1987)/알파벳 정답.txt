#include <iostream>
#include <queue>

using namespace std;

int r, c;
bool visited[21][21] = { 0, };
char board[21][21] = { 0, };
bool alphabet[26] = { 0, };	// 해당 알파벳이 앞에서 사용되었는지를 저장할 배열
int result = 0;

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, 1,-1 };

void dfs(int x, int y, int depth)
{
	int temp = board[y][x] - 65;	// 'A'가 65 이므로 65를 빼서 0으로 만듬(0부터 시작)
	alphabet[temp] = true;	// 해당 알파벳이 사용중임을 표시
	if (depth > result)
		result = depth;

	for (int i = 0; i < 4; i++)
	{
		int tempX = dx[i] + x;
		int tempY = dy[i] + y;

		if (tempX < 1 || tempY < 1 || tempX > c || tempY > r)	// 배열 범위조사
			continue;

		int value = board[tempY][tempX] - 65;
		if (alphabet[value] == true)	// 이미 앞에서 나온 알파벳이면 pass
			continue;
			
		dfs(tempX, tempY, depth + 1);
	}
	alphabet[temp] = false;	// 재귀가 끝났으므로 해당 알파벳을 사용하지 않음으로 돌림
}

// A -> 65
// Z -> 90
int main()
{
	cin >> r >> c;

	for (int i = 1; i <= r; i++)
	{
		for (int j = 1; j <= c; j++)
		{
			cin >> board[i][j];
		}
	}

	dfs(1, 1, 1);
	cout << result;
	return 0;
}