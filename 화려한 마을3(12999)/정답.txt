#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

#define CNT 100001
#define OFFSET 100000
#define NUM_RANGE 200001
#define QUERY_CNT 100001

using namespace std;

int n, q, blockSize;
int arr[CNT];
int counting[NUM_RANGE];
int maxCnt[CNT];
int answer[QUERY_CNT];
vector<pair<pair<int, int>, int>> query;

// 쿼리를 블럭 순서로 저장, 블럭 순서가 같을경우 종료구간으로 오름차순 정렬
bool cmp(pair<pair<int, int>, int> &f, pair<pair<int, int>, int> &s)
{
	if (f.first.first / blockSize == s.first.first / blockSize)
		return f.first.second < s.first.second;
	else
		return f.first.first / blockSize < s.first.first / blockSize;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 수열 입력 받음
	cin >> n >> q;
	for (int i = 1; i <= n; i++)
	{
		cin >> arr[i];
		arr[i] += OFFSET;
	}
		
	// 쿼리 저장
	int first, second;
	for (int i = 1; i <= q; i++)
	{
		cin >> first >> second;
		query.push_back({{ first , second }, i});
	}

	// 블럭 사이즈 계싼
	blockSize = sqrt(n);

	// 쿼리 정렬
	sort(query.begin(), query.end(), cmp);

	// mos 알고리즘으로 구간의 페인트 중 가장 많을 것의 개수 카운팅
	int lp = 0, rp = 0, len = query.size(), result = 0;
	for (int i = 0; i < len; i++)
	{
		int l = query[i].first.first;	// 쿼리 시작 구간
		int r = query[i].first.second;	// 쿼리 종료 구간
		int queryIndex = query[i].second;	// 쿼리 인덱스

		// 새로 꺼낸 오른쪽 종료 구간 쿼리가 더 클경우
		// 쿼리를 증가시키며 원소 포함 시킴
		while (rp < r)
		{
			int num = arr[++rp];
			if (counting[num] > 0) maxCnt[counting[num]]--;
			counting[num]++;
			maxCnt[counting[num]]++;
			result = max(result, counting[num]);
		}

		// 새로 꺼낸 쿼리가 기존 종료 구간 쿼리보다 더 작을 경우
		while (rp > r)
		{
			int num = arr[rp--];
			// 감소시키려는 값이 결과값의 최대 개수일 경우
			if (maxCnt[counting[num]] == 1 && counting[num] == result)	
				result--;

			maxCnt[counting[num]]--;
			counting[num]--;
			maxCnt[counting[num]]++;
		}

		// 새로 꺼낸 시작 쿼리가 기존 시작 쿼리보다 더 클경우
		// 인덱스를 증가시키며 수를 하나씩 제거해나감
		while (lp < l)
		{
			int num = arr[lp++];
			if (maxCnt[counting[num]] == 1 && counting[num] == result)
				result--;

			maxCnt[counting[num]]--;
			counting[num]--;
			maxCnt[counting[num]]++;
		}

		// 새로 꺼낸 시작 구간이 기존 시작 구간보다 더 작을경우
		// 인덱스를 감소시키며 수를 하나씩 포함시켜나감
		while (lp > l)
		{
			int num = arr[--lp];

			if (counting[num] > 0) maxCnt[counting[num]]--;
			counting[num]++;
			maxCnt[counting[num]]++;
			result = max(result, counting[num]);
		}

		answer[queryIndex] = result;
	}

	// 결과 출력
	for (int i = 1; i <= q; i++)
		cout << answer[i] << "\n";

	return 0;
}