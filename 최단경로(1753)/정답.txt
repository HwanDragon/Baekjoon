#include <iostream>
#include <queue>
#include <vector>

#define INF 1000000000

using namespace std;

vector<pair<int, int>> edges[20001];

// 거리값 기준으로 오름차순으로 정렬
struct cmp {
	bool operator()(pair<int, int> &f, pair<int, int> &s) {
		return f.second > s.second;
	}
};

int v, e;
int dists[20001] = { 0, };	// 최단경로 계산을 위한 거리 저장 배열

void dijkstra(int startNode)
{
	priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
	dists[startNode] = 0;	// 시작노드에서 시작노드까지 비용 0으로 세팅
	pq.push({startNode, 0});	// 시작노드 우선순위큐에 추가

	while (pq.empty() == false)
	{
		pair<int, int> p = pq.top();
		pq.pop();
		int currentNode = p.first;	// 현재 선택된 거쳐가는 노드
		int currentToDist = p.second;	// 현재노드까지 도달 가능한 최소비용

		if (currentToDist > dists[currentNode])	continue;	// 최단거리가 아님

		for (int i = 0; i < edges[currentNode].size(); i++)
		{
			pair<int, int> np = edges[currentNode].at(i);	// 다음노드
			int nextNode = np.first;
			int nextToDist = np.second;

			// 현재노드까지 비용 + 현재노드에서 다음노드까지 비용
			// 다음노드까지 가는데 현재까지 계산된 dists[nextNode] 비용 비교하여 더 값이 적으면 갱신
			if (dists[nextNode] > nextToDist + currentToDist)
			{
				dists[nextNode] = nextToDist + currentToDist;
				pq.push({nextNode, nextToDist + currentToDist });	// nextNode 후보지에 추가
			}
		}
	}
}

// 데이터 출력
void print()
{
	for (int i = 1; i <= v; i++)
	{
		if (dists[i] == INF)
			cout << "INF" << "\n";
		else 
			cout << dists[i] << "\n";
	}
}

int main()
{
	int startNode;
	cin >> v >> e >> startNode;
	
	int f, s, w;
	for (int i = 0; i < e; i++)
	{
		cin >> f >> s >> w;
		edges[f].push_back({s, w});
	}

	for (int i = 0; i <= v; i++) dists[i] = INF;
	dijkstra(startNode);
	print();

	return 0;
}