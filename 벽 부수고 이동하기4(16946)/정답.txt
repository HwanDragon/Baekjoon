#include <iostream>
#include <vector>

/*
처음에 벽이 아닌 지점을 dfs로 탐색하여 움직일 수 있는 영역의 크기와 dfs 탐색시 발견 순서를 저장함
그리고 벽인 지점을 모두 탐색하여 상하좌우로 움직일 수 있는 영역을 탐색하여 결과 출력

4 4
0000
0110
0110
0000
일 경우

0000
0330
0330
0000
이 나와야함, 즉 상하좌우를 살펴봤을 때, 각각의 영역이 사실 같은 영역일 수 있으므로 dfs 탐색 순서를 별도로 저장함

다른 반례
입력
6 6
101010
000000
101010
000000
101010
000000

출력
808080
000000
808080
000000
808080
000000
*/

#define CNT 1002

using namespace std;

int n, m;	// 행(y), 열(x)
char map[CNT][CNT];	// 맵 정보
int mapArea[CNT][CNT];	// 맵에서 0으로 되어있는 지점을 탐색하여 움직일 수 있는 구간이 얼마인지 계산
int mapDiscover[CNT][CNT];	// 맵에서 0으로 되어있는 지점을 발견한 순서
int visited[CNT][CNT];	// 맵 크기 탐색시 사용할 방문처리 배열
int numberingVisited[CNT][CNT];	// 맵에 크기 저장, 맵 발견 번호 매길 때 사용할 방문처리 배열
int dx[4] = { 0, 0, 1, -1};
int dy[4] = { 1, -1, 0, 0};

// 벽이 아닌 위치의 크기 반환
int dfs(int x, int y, int cnt)
{
	visited[y][x] = true;	// 방문처리
	for (int i = 0; i < 4; i++)
	{
		int tempX = x + dx[i];
		int tempY = y + dy[i];

		if (tempX < 0 || tempY < 0 || tempX >= m || tempY >= n) continue;	// 배열의 범위를 벗어날 경우 pass
		if (visited[tempY][tempX] == true) continue;	// 이미 방문한 지역은 pass
		if (map[tempY][tempX] == '1') continue; // 벽은 pass

		cnt = dfs(tempX, tempY, ++cnt);
	}

	return cnt;	// 벽이 아닌 지역의 크기 반환
}

// x, y 위치에 움직일 수 있는 영역의 크기와, dfs 탐색시 맵을 발견한 순서 저장
void grantNumber(int x, int y, int mapSize, int mapDiscoverSeq)
{
	numberingVisited[y][x] = true;	
	mapArea[y][x] = mapSize;	// 맵 크기 저장
	mapDiscover[y][x] = mapDiscoverSeq;	// 맵을 발견한 순서 저장
	for (int i = 0; i < 4; i++)
	{
		int tempX = x + dx[i];
		int tempY = y + dy[i];

		if (tempX < 0 || tempY < 0 || tempX >= m || tempY >= n) continue;	// 배열의 범위를 벗어날 경우 pass
		if (numberingVisited[tempY][tempX] == true) continue;	// 이미 방문한 지역은 pass
		if (map[tempY][tempX] == '1') continue; // 벽은 pass

		grantNumber(tempX, tempY, mapSize, mapDiscoverSeq);	// 재귀적으로 탐색하여 저장함
	}
}

// x, y 위치로부터 위, 아래, 왼쪽, 오른쪽으로 각가 움직일 수 있는 영역이 얼마인지 계산하여 반환함
// 상하좌우가 각각 같은 영역일 수 있으므로, 이를 고려하여 계싼함
int calc(int x, int y)
{
	vector<pair<int, int>> v;	// {영역 번호, 영역 크기} 저장
	for (int i = 0; i < 4; i++)	// 상하좌우 탐색
	{
		int tempX = x + dx[i];
		int tempY = y + dy[i];

		if (tempX < 0 || tempY < 0 || tempX >= m || tempY >= n) continue;	// 배열의 범위를 벗어날 경우 pass
		if (map[tempY][tempX] == '1') continue; // 벽은 pass

		// v에 이미 같은 지점의 영역이 존재하는지 탐색
		bool existSameArea = false;
		for (int j = 0; j < v.size(); j++)
		{
			pair<int, int> p = v.at(j);
			if (p.first == mapDiscover[tempY][tempX]) // 같은 영역이 존재할 경우
				existSameArea = true;
		}

		if (existSameArea == false)
			v.push_back({ mapDiscover[tempY][tempX], mapArea[tempY][tempX] });	// 같은 영역이 아닐경우에만 추가함
	}

	// 움직일 수 있는 영역의 총합 계산
	int r = 0;
	for (int i = 0; i < v.size(); i++)
		r += v.at(i).second;

	return r;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 입력 받음
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> map[i];

	// BFS 탐색
	int mapDiscoverSeq = 1;
	for (int y = 0;  y < n; y++)
	{
		for (int x = 0; x < m; x++)
		{
			if (map[y][x] == '0' && visited[y][x] == false)
			{
				int cnt = dfs(x, y, 1);
				grantNumber(x, y, cnt, mapDiscoverSeq);
				mapDiscoverSeq++;
			}
		}
	}

	// (x, y) 지점의 벽을 부수고 위, 아래, 오른쪽, 왼쪽 지점의 이동할 수 있는 크기를 각각 더함
	int result = 0;
	for (int y = 0; y < n; y++)
	{
		for (int x = 0; x < m; x++)
		{
			if (map[y][x] == '0')
				cout << 0;
			else
			{
				cout << (calc(x, y) + 1) % 10;
			}
		}
		cout << "\n";
	}

	return 0;
}