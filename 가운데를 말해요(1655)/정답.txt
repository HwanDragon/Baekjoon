#include <queue>
#include <iostream>
#include <vector>

using namespace std;
/*
반례
4
4 3 2 1
정답 : 4 3 3 2
*/
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	/*
	step	입력이 (1  5  2  10  -99  7  5) 일 경우
	1		leftQueue	input		rightQueue		mid
	2		1			2			5				1, 1
	3		1 2			10			5				2
	4		1 2			-99			5 10			2
	5		-99 1 2		7			5 10			2
	6		-99 1 2		5			5 7 10			2
	7		-99	1 2					5 5 7 10		5
	*/
	vector<int> v;
	priority_queue<int, vector<int>, less<int>> leftQueue;	// 중간값을 기준으로 작은값을 담을 우선순위큐
	priority_queue<int, vector<int>, greater<int>> rightQueue;	// 중간값을 기준으로 큰값을 담을 우선순위큐

	// 사용자 입력 받음
	int n, num;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> num;
		v.push_back(num);
	}

	// n 입력이 1일때 예외처리
	if (n == 1)
	{
		cout << v[0];
		return 0;
	}

	// n 입력이 2일때 예외처리
	if (n == 2)
	{
		cout << v[0] << "\n";
		cout << min(v[0], v[1]);
		return 0;
	}

	leftQueue.push(min(v[0], v[1]));	// 0과 1번 데이터중 작은 값을 담음
	rightQueue.push(max(v[0], v[1]));	// 0과 1번 데이터중 큰 값을 담음
	cout << v[0] << "\n";
	cout << min(v[0], v[1]) << "\n";

	for (int i = 2; i < v.size(); i++)
	{
		int num = v.at(i);
		if (num <= leftQueue.top())
			leftQueue.push(num);
		else if (num >= rightQueue.top())
			rightQueue.push(num);
		else
			leftQueue.push(num);


		// 분배작업
		if ((leftQueue.size() + 1) < (rightQueue.size()))
		{
			leftQueue.push(rightQueue.top());
			rightQueue.pop();
		}
		else if (leftQueue.size() > (rightQueue.size() + 1))
		{
			rightQueue.push(leftQueue.top());
			leftQueue.pop();
		}

		if (leftQueue.size() == rightQueue.size())
		{
			cout << min(leftQueue.top(), rightQueue.top()) << "\n";
		}
		else if (leftQueue.size() > rightQueue.size())
		{
			cout << leftQueue.top() << "\n";
		}
		else
		{
			cout << rightQueue.top() << "\n";
		}
	}

	return 0;
}