#include <iostream>

#define NODE_COUNT 1000001

using namespace std;

int n, m;
int nums[NODE_COUNT] = { 0, };
long long segTree[NODE_COUNT * 4] = { 0, };

long long init(int start, int end, int node)
{
	if (start == end) return segTree[node] = nums[start];

	int mid = (start + end) / 2;
	return segTree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2+ 1);
}

long long sum(int start, int end, int left, int right, int node)
{
	// 구간에 포함되지 않는 경우
	if (left > end || right < start) return 0;

	// 구간에 완전히 포함되는 경우
	if (left <= start && right >= end) return segTree[node];

	int mid = (start + end) / 2;
	return sum(start, mid, left, right, node * 2) + sum(mid + 1, end, left, right, node * 2 + 1);
}

void update(int start, int end, int index, int node, int diff)
{
	// 구간에 포함되지 않는 경우
	if (index > end || index < start) return;

	// 구간에 포함되는 경우
	segTree[node] += diff;
	if (start == end) return;
	
	int mid = (start + end) / 2;
	update(start, mid, index, node * 2, diff);
	update(mid + 1, end, index, node * 2 + 1, diff);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> n >> m;

	init(1, n, 1);
	int first, second, third;
	for (int i = 0 ; i < m; i++)
	{
		cin >> first >> second >> third;
		if (first == 0)
		{
			if (second > third)
				cout << sum(1, n, third, second, 1) << "\n";
			else
				cout << sum(1, n, second, third, 1) << "\n";
		}
		else
		{
			update(1, n, second, 1, third - nums[second]);
			nums[second] = third;
		}
	}
	return 0;
}
