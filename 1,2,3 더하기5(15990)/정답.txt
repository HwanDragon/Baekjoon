#include <iostream>

#define CNT 100001
#define MOD 1000000009

using namespace std;

typedef long long ll;

/*
n이 1 일경우
가능한 경우 : 
1

n이 2 일경우
가능한 경우 :
2

n이 3 일경우
가능한 경우 :
1 + 2
2 + 1
3

n이 4 일경우
가능한 경우 :
1 + 3
1 + 2 + 1
3 + 1

n이 5 일경우
가능한 경우 :
1 + 3 + 1
2 + 1 + 2
2 + 3
3 + 2

n이 6 일경우
가능한 경우 :
1 + 2 + 1 + 2
1 + 2 + 3
1 + 3 + 2
2 + 1 + 2 + 1
2 + 1 + 3
2 + 3 + 1
3 + 1 + 2
3 + 2 + 1

위의 케이스를 보면 n이 6일 때
처음이 1로 시작하면 뒤에 합은 5가 되어야 하고, 
5를 만들 수 있는 케이스를 보면 총 4가지이나, 맨 앞이 1로 시작하는 경우는 제외되어야 한다.
즉, 어떤수를 만들 때, 앞이 1로 시작하는지, 2로 시작하는지, 3으로 시작하는지 구분지어야 하며, 
어떤수 n을 만들때 식을 f(n, i) 라고 하면(i = 1, 2, 3)

f(n, 1) = f(n - 1, 2) + f(n - 1, 3)
f(n, 2) = f(n - 2, 1) + f(n - 2, 3)
f(n, 3) = f(n - 3, 1) + f(n - 3, 2)

로 점화식을 세울 수 있다.

n을 1, 2, 3의 합으로 나타낼 수 있는 경우의 수는
g(n) = f(n, 1) + f(n, 2) + f(n, 3)
으로 나타낼 수 있다.
*/

ll dp[CNT][4];

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 초기값 설정
	dp[1][1] = 1;	
	dp[2][2] = 1;
	dp[3][1] = 1;
	dp[3][2] = 1;
	dp[3][3] = 1;

	// 점화식에 따른 계산
	for (int i = 4; i < CNT; i++)
	{
		dp[i][1] = (dp[i - 1][2] + dp[i - 1][3]) % MOD;	// f(n, 1) = f(n - 1, 2) + f(n - 1, 3)
		dp[i][2] = (dp[i - 2][1] + dp[i - 2][3]) % MOD;	// f(n, 2) = f(n - 2, 1) + f(n - 2, 3)
		dp[i][3] = (dp[i - 3][1] + dp[i - 3][2]) % MOD;	// f(n, 3) = f(n - 3, 1) + f(n - 3, 2)
	}

	// 테스트 케이스 입력
	int t;
	cin >> t;

	// 결과 출력
	while (t--)
	{
		int n;
		cin >> n;
		cout << ((dp[n][1] + dp[n][2] + dp[n][3]) % MOD) << "\n";
	}

	return 0;
}