#include <queue>
#include <iostream>
#include <vector>

using namespace std;

int v, e;
int first, second, weight;
vector<pair<int, int>> edges[10001];
bool visited[10001] = { 0, };

struct cmp {
	bool operator() (pair<int, int> &f, pair<int, int> &s) {
		return f.second > s.second;
	}
};

int prim(int startNode)
{
	priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
	pq.push({startNode, 0});
	int result = 0;

	while (pq.empty() == false)
	{
		pair<int, int> p = pq.top();
		pq.pop();

		int node = p.first;
		int dist = p.second;

		if (visited[node] == true)	continue;

		visited[node] = true;
		result += dist;
		for (int i = 0; i < edges[node].size(); i++)
		{
			pair<int, int> np = edges[node].at(i);
			pq.push(np);
		}
	}

	return result;
}

int main()
{
	cin >> v >> e;
	for (int i = 0; i < e; i++)
	{
		cin >> first >> second >> weight;
		edges[first].push_back({ second, weight });
		edges[second].push_back({ first, weight });
	}

	cout << prim(1);

	return 0;
}