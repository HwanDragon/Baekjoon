#include <iostream>
#include <queue>

#define CNT 1001

using namespace std;

int n, m;
char map[CNT][CNT] = { 0, };	// 맵 정보
bool visited[CNT][CNT] = { 0, };	// BFS 탐색시 방문처리 배열
int dx[4] = { 0, 0, 1, -1 };
int dy[4] = { 1, -1, 0, 0 };

bool bfs()
{
	bool result = false;
	queue<pair<int,int>> q;	// pair{x, y} 

	// 2차원 격자의 가장 위쪽 중 전류가 통하는 지점 큐에 시작점으로 추가
	for (int i = 0; i < m; i++)
	{
		if (map[0][i] == '0')
			q.push({i, 0});	// { x, y }
	}

	while (q.empty() == false)
	{
		pair<int, int> p = q.front();
		q.pop();
		int x = p.first;
		int y = p.second;

		if (y == n - 1) return true;	// 아래까지 전류가 전달됨

		for (int i = 0; i < 4; i++)
		{
			int tempX = x + dx[i];
			int tempY = y + dy[i];

			if (tempX < 0 || tempY < 0 || tempX >= m || tempY >= n) continue;	// 배열범위 초과
			if (map[tempY][tempX] == '1') continue;	// 전류가 통하지 않는 지역은 pass
			if (visited[tempY][tempX] == true) continue;	// 이미 방문한 지역 pass

			visited[tempY][tempX] = true;
			q.push({tempX, tempY});	// 다음지역 큐에 추가
		}
	}

	return false;
}

int main()
{
	// 입출력 속도 향상
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	// 사용자 정보 입력 받음
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> map[i];

	// BFS 탐색
	bool r = bfs();
	
	// 결과 출력
	cout << ((r == true) ? "YES" : "NO");
	return 0;
}